
STM32_TMC2130.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d40  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08003ed4  08003ed4  00013ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040bc  080040bc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080040bc  080040bc  000140bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040c4  080040c4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040c4  080040c4  000140c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040c8  080040c8  000140c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080040cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000010  080040dc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080040dc  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d281  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ec5  00000000  00000000  0002d2c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d88  00000000  00000000  0002f188  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c80  00000000  00000000  0002ff10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002817  00000000  00000000  00030b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ca7b  00000000  00000000  000333a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c738  00000000  00000000  0003fe22  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc55a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003884  00000000  00000000  000cc5d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003ebc 	.word	0x08003ebc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08003ebc 	.word	0x08003ebc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	; 0x28
 80004d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	613b      	str	r3, [r7, #16]
 80004ee:	4b5a      	ldr	r3, [pc, #360]	; (8000658 <MX_GPIO_Init+0x184>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a59      	ldr	r2, [pc, #356]	; (8000658 <MX_GPIO_Init+0x184>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
 80004fa:	4b57      	ldr	r3, [pc, #348]	; (8000658 <MX_GPIO_Init+0x184>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	613b      	str	r3, [r7, #16]
 8000504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	4b53      	ldr	r3, [pc, #332]	; (8000658 <MX_GPIO_Init+0x184>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a52      	ldr	r2, [pc, #328]	; (8000658 <MX_GPIO_Init+0x184>)
 8000510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b50      	ldr	r3, [pc, #320]	; (8000658 <MX_GPIO_Init+0x184>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	4b4c      	ldr	r3, [pc, #304]	; (8000658 <MX_GPIO_Init+0x184>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a4b      	ldr	r2, [pc, #300]	; (8000658 <MX_GPIO_Init+0x184>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b49      	ldr	r3, [pc, #292]	; (8000658 <MX_GPIO_Init+0x184>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	4b45      	ldr	r3, [pc, #276]	; (8000658 <MX_GPIO_Init+0x184>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a44      	ldr	r2, [pc, #272]	; (8000658 <MX_GPIO_Init+0x184>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b42      	ldr	r3, [pc, #264]	; (8000658 <MX_GPIO_Init+0x184>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0302 	and.w	r3, r3, #2
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	603b      	str	r3, [r7, #0]
 800055e:	4b3e      	ldr	r3, [pc, #248]	; (8000658 <MX_GPIO_Init+0x184>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a3d      	ldr	r2, [pc, #244]	; (8000658 <MX_GPIO_Init+0x184>)
 8000564:	f043 0308 	orr.w	r3, r3, #8
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b3b      	ldr	r3, [pc, #236]	; (8000658 <MX_GPIO_Init+0x184>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0308 	and.w	r3, r3, #8
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000576:	2201      	movs	r2, #1
 8000578:	2120      	movs	r1, #32
 800057a:	4838      	ldr	r0, [pc, #224]	; (800065c <MX_GPIO_Init+0x188>)
 800057c:	f001 f8f8 	bl	8001770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEP_Pin|DIR_Pin, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000586:	4835      	ldr	r0, [pc, #212]	; (800065c <MX_GPIO_Init+0x188>)
 8000588:	f001 f8f2 	bl	8001770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2140      	movs	r1, #64	; 0x40
 8000590:	4833      	ldr	r0, [pc, #204]	; (8000660 <MX_GPIO_Init+0x18c>)
 8000592:	f001 f8ed 	bl	8001770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800059c:	4b31      	ldr	r3, [pc, #196]	; (8000664 <MX_GPIO_Init+0x190>)
 800059e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4619      	mov	r1, r3
 80005aa:	482c      	ldr	r0, [pc, #176]	; (800065c <MX_GPIO_Init+0x188>)
 80005ac:	f000 fe4e 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC7 PC9 PC10 
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80005b0:	f641 639f 	movw	r3, #7839	; 0x1e9f
 80005b4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b6:	2303      	movs	r3, #3
 80005b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4619      	mov	r1, r3
 80005c4:	4825      	ldr	r0, [pc, #148]	; (800065c <MX_GPIO_Init+0x188>)
 80005c6:	f000 fe41 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA8 
                           PA9 PA10 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8 
 80005ca:	f649 7313 	movw	r3, #40723	; 0x9f13
 80005ce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d0:	2303      	movs	r3, #3
 80005d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	4619      	mov	r1, r3
 80005de:	4822      	ldr	r0, [pc, #136]	; (8000668 <MX_GPIO_Init+0x194>)
 80005e0:	f000 fe34 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = EN_Pin|STEP_Pin|DIR_Pin;
 80005e4:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80005e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2300      	movs	r3, #0
 80005f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	4619      	mov	r1, r3
 80005fc:	4817      	ldr	r0, [pc, #92]	; (800065c <MX_GPIO_Init+0x188>)
 80005fe:	f000 fe25 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB12 PB13 PB14 PB15 
                           PB3 PB4 PB5 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000602:	f24f 73bf 	movw	r3, #63423	; 0xf7bf
 8000606:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000608:	2303      	movs	r3, #3
 800060a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4619      	mov	r1, r3
 8000616:	4812      	ldr	r0, [pc, #72]	; (8000660 <MX_GPIO_Init+0x18c>)
 8000618:	f000 fe18 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800061c:	2304      	movs	r3, #4
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000620:	2303      	movs	r3, #3
 8000622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4619      	mov	r1, r3
 800062e:	480f      	ldr	r0, [pc, #60]	; (800066c <MX_GPIO_Init+0x198>)
 8000630:	f000 fe0c 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000634:	2340      	movs	r3, #64	; 0x40
 8000636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	2301      	movs	r3, #1
 800063a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000640:	2300      	movs	r3, #0
 8000642:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4619      	mov	r1, r3
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_GPIO_Init+0x18c>)
 800064c:	f000 fdfe 	bl	800124c <HAL_GPIO_Init>

}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	; 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40020800 	.word	0x40020800
 8000660:	40020400 	.word	0x40020400
 8000664:	10210000 	.word	0x10210000
 8000668:	40020000 	.word	0x40020000
 800066c:	40020c00 	.word	0x40020c00

08000670 <TMC2130_Write_Register>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t TMC2130_Write_Register(uint8_t reg, uint32_t data)
    {
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af02      	add	r7, sp, #8
 8000676:	4603      	mov	r3, r0
 8000678:	6039      	str	r1, [r7, #0]
 800067a:	71fb      	strb	r3, [r7, #7]

    uint8_t s;
    uint8_t temp;

    uint8_t cmd_w = 0x80 | reg;
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000682:	b2db      	uxtb	r3, r3
 8000684:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2140      	movs	r1, #64	; 0x40
 800068a:	4821      	ldr	r0, [pc, #132]	; (8000710 <TMC2130_Write_Register+0xa0>)
 800068c:	f001 f870 	bl	8001770 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&hspi1, &cmd_w, &s, 1, 100);
 8000690:	f107 020f 	add.w	r2, r7, #15
 8000694:	f107 010d 	add.w	r1, r7, #13
 8000698:	2364      	movs	r3, #100	; 0x64
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2301      	movs	r3, #1
 800069e:	481d      	ldr	r0, [pc, #116]	; (8000714 <TMC2130_Write_Register+0xa4>)
 80006a0:	f002 f9ee 	bl	8002a80 <HAL_SPI_TransmitReceive>

    temp = ((data >> 24UL) & 0xFF);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	0e1b      	lsrs	r3, r3, #24
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	73bb      	strb	r3, [r7, #14]
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 80006ac:	f107 010e 	add.w	r1, r7, #14
 80006b0:	2364      	movs	r3, #100	; 0x64
 80006b2:	2201      	movs	r2, #1
 80006b4:	4817      	ldr	r0, [pc, #92]	; (8000714 <TMC2130_Write_Register+0xa4>)
 80006b6:	f001 ff95 	bl	80025e4 <HAL_SPI_Transmit>

    temp = ((data >> 16UL) & 0xFF);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	0c1b      	lsrs	r3, r3, #16
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	73bb      	strb	r3, [r7, #14]
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 80006c2:	f107 010e 	add.w	r1, r7, #14
 80006c6:	2364      	movs	r3, #100	; 0x64
 80006c8:	2201      	movs	r2, #1
 80006ca:	4812      	ldr	r0, [pc, #72]	; (8000714 <TMC2130_Write_Register+0xa4>)
 80006cc:	f001 ff8a 	bl	80025e4 <HAL_SPI_Transmit>

    temp = ((data >> 8UL) & 0xFF);
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	0a1b      	lsrs	r3, r3, #8
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	73bb      	strb	r3, [r7, #14]
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 80006d8:	f107 010e 	add.w	r1, r7, #14
 80006dc:	2364      	movs	r3, #100	; 0x64
 80006de:	2201      	movs	r2, #1
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <TMC2130_Write_Register+0xa4>)
 80006e2:	f001 ff7f 	bl	80025e4 <HAL_SPI_Transmit>

    temp = ((data >> 0UL) & 0xFF);
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	73bb      	strb	r3, [r7, #14]
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 80006ec:	f107 010e 	add.w	r1, r7, #14
 80006f0:	2364      	movs	r3, #100	; 0x64
 80006f2:	2201      	movs	r2, #1
 80006f4:	4807      	ldr	r0, [pc, #28]	; (8000714 <TMC2130_Write_Register+0xa4>)
 80006f6:	f001 ff75 	bl	80025e4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2140      	movs	r1, #64	; 0x40
 80006fe:	4804      	ldr	r0, [pc, #16]	; (8000710 <TMC2130_Write_Register+0xa0>)
 8000700:	f001 f836 	bl	8001770 <HAL_GPIO_WritePin>

    return s;
 8000704:	7bfb      	ldrb	r3, [r7, #15]
    }
 8000706:	4618      	mov	r0, r3
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40020400 	.word	0x40020400
 8000714:	20000034 	.word	0x20000034

08000718 <TMC2130_Set_Read_Register>:


void TMC2130_Set_Read_Register(uint8_t reg)
    {
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]

    uint8_t temp = 0x00;
 8000722:	2300      	movs	r3, #0
 8000724:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2140      	movs	r1, #64	; 0x40
 800072a:	4817      	ldr	r0, [pc, #92]	; (8000788 <TMC2130_Set_Read_Register+0x70>)
 800072c:	f001 f820 	bl	8001770 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, &reg , 1, 100);
 8000730:	1df9      	adds	r1, r7, #7
 8000732:	2364      	movs	r3, #100	; 0x64
 8000734:	2201      	movs	r2, #1
 8000736:	4815      	ldr	r0, [pc, #84]	; (800078c <TMC2130_Set_Read_Register+0x74>)
 8000738:	f001 ff54 	bl	80025e4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 800073c:	f107 010f 	add.w	r1, r7, #15
 8000740:	2364      	movs	r3, #100	; 0x64
 8000742:	2201      	movs	r2, #1
 8000744:	4811      	ldr	r0, [pc, #68]	; (800078c <TMC2130_Set_Read_Register+0x74>)
 8000746:	f001 ff4d 	bl	80025e4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 800074a:	f107 010f 	add.w	r1, r7, #15
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	480e      	ldr	r0, [pc, #56]	; (800078c <TMC2130_Set_Read_Register+0x74>)
 8000754:	f001 ff46 	bl	80025e4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 8000758:	f107 010f 	add.w	r1, r7, #15
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2201      	movs	r2, #1
 8000760:	480a      	ldr	r0, [pc, #40]	; (800078c <TMC2130_Set_Read_Register+0x74>)
 8000762:	f001 ff3f 	bl	80025e4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 8000766:	f107 010f 	add.w	r1, r7, #15
 800076a:	2364      	movs	r3, #100	; 0x64
 800076c:	2201      	movs	r2, #1
 800076e:	4807      	ldr	r0, [pc, #28]	; (800078c <TMC2130_Set_Read_Register+0x74>)
 8000770:	f001 ff38 	bl	80025e4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2140      	movs	r1, #64	; 0x40
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <TMC2130_Set_Read_Register+0x70>)
 800077a:	f000 fff9 	bl	8001770 <HAL_GPIO_WritePin>

    }
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40020400 	.word	0x40020400
 800078c:	20000034 	.word	0x20000034

08000790 <TMC2130_Read_Register>:

uint8_t TMC2130_Read_Register(uint8_t reg, uint32_t *data)
    {
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af02      	add	r7, sp, #8
 8000796:	4603      	mov	r3, r0
 8000798:	6039      	str	r1, [r7, #0]
 800079a:	71fb      	strb	r3, [r7, #7]

    uint8_t s;
    uint8_t temp;
    uint32_t val = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]

    TMC2130_Set_Read_Register(reg);
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ffb8 	bl	8000718 <TMC2130_Set_Read_Register>

    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2140      	movs	r1, #64	; 0x40
 80007ac:	4824      	ldr	r0, [pc, #144]	; (8000840 <TMC2130_Read_Register+0xb0>)
 80007ae:	f000 ffdf 	bl	8001770 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&hspi1, &reg, &s, 1, 100);
 80007b2:	f107 020b 	add.w	r2, r7, #11
 80007b6:	1df9      	adds	r1, r7, #7
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2301      	movs	r3, #1
 80007be:	4821      	ldr	r0, [pc, #132]	; (8000844 <TMC2130_Read_Register+0xb4>)
 80007c0:	f002 f95e 	bl	8002a80 <HAL_SPI_TransmitReceive>

    HAL_SPI_Receive(&hspi1, &temp, 1, 100);
 80007c4:	f107 010a 	add.w	r1, r7, #10
 80007c8:	2364      	movs	r3, #100	; 0x64
 80007ca:	2201      	movs	r2, #1
 80007cc:	481d      	ldr	r0, [pc, #116]	; (8000844 <TMC2130_Read_Register+0xb4>)
 80007ce:	f002 f84d 	bl	800286c <HAL_SPI_Receive>
    val = temp << 24;
 80007d2:	7abb      	ldrb	r3, [r7, #10]
 80007d4:	061b      	lsls	r3, r3, #24
 80007d6:	60fb      	str	r3, [r7, #12]

    HAL_SPI_Receive(&hspi1, &temp, 1, 100);
 80007d8:	f107 010a 	add.w	r1, r7, #10
 80007dc:	2364      	movs	r3, #100	; 0x64
 80007de:	2201      	movs	r2, #1
 80007e0:	4818      	ldr	r0, [pc, #96]	; (8000844 <TMC2130_Read_Register+0xb4>)
 80007e2:	f002 f843 	bl	800286c <HAL_SPI_Receive>
    val |= temp << 16;
 80007e6:	7abb      	ldrb	r3, [r7, #10]
 80007e8:	041b      	lsls	r3, r3, #16
 80007ea:	461a      	mov	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	60fb      	str	r3, [r7, #12]

    HAL_SPI_Receive(&hspi1, &temp, 1, 100);
 80007f2:	f107 010a 	add.w	r1, r7, #10
 80007f6:	2364      	movs	r3, #100	; 0x64
 80007f8:	2201      	movs	r2, #1
 80007fa:	4812      	ldr	r0, [pc, #72]	; (8000844 <TMC2130_Read_Register+0xb4>)
 80007fc:	f002 f836 	bl	800286c <HAL_SPI_Receive>
    val |= temp << 8;
 8000800:	7abb      	ldrb	r3, [r7, #10]
 8000802:	021b      	lsls	r3, r3, #8
 8000804:	461a      	mov	r2, r3
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	4313      	orrs	r3, r2
 800080a:	60fb      	str	r3, [r7, #12]

    HAL_SPI_Receive(&hspi1, &temp, 1, 100);
 800080c:	f107 010a 	add.w	r1, r7, #10
 8000810:	2364      	movs	r3, #100	; 0x64
 8000812:	2201      	movs	r2, #1
 8000814:	480b      	ldr	r0, [pc, #44]	; (8000844 <TMC2130_Read_Register+0xb4>)
 8000816:	f002 f829 	bl	800286c <HAL_SPI_Receive>
    val |= temp << 0;
 800081a:	7abb      	ldrb	r3, [r7, #10]
 800081c:	461a      	mov	r2, r3
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	4313      	orrs	r3, r2
 8000822:	60fb      	str	r3, [r7, #12]

    *data = val;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	601a      	str	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	2140      	movs	r1, #64	; 0x40
 800082e:	4804      	ldr	r0, [pc, #16]	; (8000840 <TMC2130_Read_Register+0xb0>)
 8000830:	f000 ff9e 	bl	8001770 <HAL_GPIO_WritePin>

    return s;
 8000834:	7afb      	ldrb	r3, [r7, #11]
    }
 8000836:	4618      	mov	r0, r3
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40020400 	.word	0x40020400
 8000844:	20000034 	.word	0x20000034

08000848 <CLI_UART_Send_Char>:


void CLI_UART_Send_Char(char data)
    {
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
    CLI_UART->Instance->DR = (data);
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <CLI_UART_Send_Char+0x34>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	79fa      	ldrb	r2, [r7, #7]
 800085a:	605a      	str	r2, [r3, #4]
    while (__HAL_UART_GET_FLAG(CLI_UART,UART_FLAG_TC) == 0);
 800085c:	bf00      	nop
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <CLI_UART_Send_Char+0x34>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086a:	2b40      	cmp	r3, #64	; 0x40
 800086c:	d1f7      	bne.n	800085e <CLI_UART_Send_Char+0x16>
    }
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	20000000 	.word	0x20000000

08000880 <CLI_UART_Send_String>:

void CLI_UART_Send_String(char *data)
    {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
    while (*data)
 8000888:	e006      	b.n	8000898 <CLI_UART_Send_String+0x18>
	{
	CLI_UART_Send_Char(*data++);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	607a      	str	r2, [r7, #4]
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ffd8 	bl	8000848 <CLI_UART_Send_Char>
    while (*data)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d1f4      	bne.n	800088a <CLI_UART_Send_String+0xa>
	}
    }
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <CLI_UART_Send_Int_Hex>:
    itoa(num, int_to_str, 10);
    CLI_UART_Send_String(int_to_str);
    }

void CLI_UART_Send_Int_Hex(int32_t num)
    {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
    char int_to_str[32] = {0};
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	2220      	movs	r2, #32
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f003 fab9 	bl	8003e30 <memset>
    itoa(num, int_to_str, 16);
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2210      	movs	r2, #16
 80008c4:	4619      	mov	r1, r3
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f003 fab0 	bl	8003e2c <itoa>
    CLI_UART_Send_String(int_to_str);
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ffd5 	bl	8000880 <CLI_UART_Send_String>
    }
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	; 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <TMC2130_Step_TIM_ISR>:

void TMC2130_Step_TIM_ISR()
    {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
    static uint32_t pulse_count = 0;
    HAL_GPIO_TogglePin(STEP_GPIO_Port, STEP_Pin);
 80008e4:	2140      	movs	r1, #64	; 0x40
 80008e6:	480b      	ldr	r0, [pc, #44]	; (8000914 <TMC2130_Step_TIM_ISR+0x34>)
 80008e8:	f000 ff74 	bl	80017d4 <HAL_GPIO_TogglePin>
    pulse_count++;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <TMC2130_Step_TIM_ISR+0x38>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	4a09      	ldr	r2, [pc, #36]	; (8000918 <TMC2130_Step_TIM_ISR+0x38>)
 80008f4:	6013      	str	r3, [r2, #0]
    if(pulse_count > 400000)
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <TMC2130_Step_TIM_ISR+0x38>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <TMC2130_Step_TIM_ISR+0x3c>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d907      	bls.n	8000910 <TMC2130_Step_TIM_ISR+0x30>
	{
	pulse_count = 0;
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <TMC2130_Step_TIM_ISR+0x38>)
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(DIR_GPIO_Port, DIR_Pin);
 8000906:	f44f 7180 	mov.w	r1, #256	; 0x100
 800090a:	4802      	ldr	r0, [pc, #8]	; (8000914 <TMC2130_Step_TIM_ISR+0x34>)
 800090c:	f000 ff62 	bl	80017d4 <HAL_GPIO_TogglePin>
	}
    }
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40020800 	.word	0x40020800
 8000918:	2000002c 	.word	0x2000002c
 800091c:	00061a80 	.word	0x00061a80

08000920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000926:	f000 fadf 	bl	8000ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092a:	f000 f875 	bl	8000a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092e:	f7ff fdd1 	bl	80004d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000932:	f000 fa3d 	bl	8000db0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000936:	f000 f8ed 	bl	8000b14 <MX_SPI1_Init>
  MX_TIM11_Init();
 800093a:	f000 f9ef 	bl	8000d1c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */


  //set TMC2130 config
  TMC2130_Write_Register(TMC2130_GCONF,      0x00000001UL);  //voltage on AIN is current reference
 800093e:	2101      	movs	r1, #1
 8000940:	2000      	movs	r0, #0
 8000942:	f7ff fe95 	bl	8000670 <TMC2130_Write_Register>
  TMC2130_Write_Register(TMC2130_IHOLD_IRUN, 0x00001010UL);  //IHOLD=0x10, IRUN=0x10
 8000946:	f241 0110 	movw	r1, #4112	; 0x1010
 800094a:	2010      	movs	r0, #16
 800094c:	f7ff fe90 	bl	8000670 <TMC2130_Write_Register>
  TMC2130_Write_Register(TMC2130_CHOPCONF,   0x00008008UL);  //native 256 microsteps, MRES=0, TBL=1=24, TOFF=8
 8000950:	f248 0108 	movw	r1, #32776	; 0x8008
 8000954:	206c      	movs	r0, #108	; 0x6c
 8000956:	f7ff fe8b 	bl	8000670 <TMC2130_Write_Register>

	static uint32_t time_elapsed = 0;
	uint32_t data;
	uint8_t s;

	if (HAL_GetTick() - time_elapsed > 100)
 800095a:	f000 fb2b 	bl	8000fb4 <HAL_GetTick>
 800095e:	4602      	mov	r2, r0
 8000960:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <main+0xd4>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	2b64      	cmp	r3, #100	; 0x64
 8000968:	d9f7      	bls.n	800095a <main+0x3a>
	    {

	    time_elapsed = HAL_GetTick();
 800096a:	f000 fb23 	bl	8000fb4 <HAL_GetTick>
 800096e:	4602      	mov	r2, r0
 8000970:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <main+0xd4>)
 8000972:	601a      	str	r2, [r3, #0]

	    s = TMC2130_Read_Register(TMC2130_GSTAT, &data);
 8000974:	463b      	mov	r3, r7
 8000976:	4619      	mov	r1, r3
 8000978:	2001      	movs	r0, #1
 800097a:	f7ff ff09 	bl	8000790 <TMC2130_Read_Register>
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]

	    CLI_UART_Send_String("TMC2130_GSTAT:0x0");
 8000982:	481d      	ldr	r0, [pc, #116]	; (80009f8 <main+0xd8>)
 8000984:	f7ff ff7c 	bl	8000880 <CLI_UART_Send_String>
	    CLI_UART_Send_Int_Hex(data);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ff8c 	bl	80008a8 <CLI_UART_Send_Int_Hex>
	    CLI_UART_Send_String("\t");
 8000990:	481a      	ldr	r0, [pc, #104]	; (80009fc <main+0xdc>)
 8000992:	f7ff ff75 	bl	8000880 <CLI_UART_Send_String>
	    CLI_UART_Send_String("Status:0x");
 8000996:	481a      	ldr	r0, [pc, #104]	; (8000a00 <main+0xe0>)
 8000998:	f7ff ff72 	bl	8000880 <CLI_UART_Send_String>
	    CLI_UART_Send_Int_Hex(s);
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff82 	bl	80008a8 <CLI_UART_Send_Int_Hex>

	    if (s & 0x01)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d003      	beq.n	80009b6 <main+0x96>
		{
		CLI_UART_Send_String(" reset");
 80009ae:	4815      	ldr	r0, [pc, #84]	; (8000a04 <main+0xe4>)
 80009b0:	f7ff ff66 	bl	8000880 <CLI_UART_Send_String>
 80009b4:	e019      	b.n	80009ea <main+0xca>
		}
	    else if (s & 0x02)
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	f003 0302 	and.w	r3, r3, #2
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d003      	beq.n	80009c8 <main+0xa8>
		{
		CLI_UART_Send_String(" error");
 80009c0:	4811      	ldr	r0, [pc, #68]	; (8000a08 <main+0xe8>)
 80009c2:	f7ff ff5d 	bl	8000880 <CLI_UART_Send_String>
 80009c6:	e010      	b.n	80009ea <main+0xca>
		}
	    else if (s & 0x04)
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d003      	beq.n	80009da <main+0xba>
		{
		CLI_UART_Send_String(" sg2");
 80009d2:	480e      	ldr	r0, [pc, #56]	; (8000a0c <main+0xec>)
 80009d4:	f7ff ff54 	bl	8000880 <CLI_UART_Send_String>
 80009d8:	e007      	b.n	80009ea <main+0xca>
		}
	    else if (s & 0x08)
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	f003 0308 	and.w	r3, r3, #8
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d002      	beq.n	80009ea <main+0xca>
		{
		CLI_UART_Send_String(" standstill");
 80009e4:	480a      	ldr	r0, [pc, #40]	; (8000a10 <main+0xf0>)
 80009e6:	f7ff ff4b 	bl	8000880 <CLI_UART_Send_String>
		}
	    CLI_UART_Send_String("\n");
 80009ea:	480a      	ldr	r0, [pc, #40]	; (8000a14 <main+0xf4>)
 80009ec:	f7ff ff48 	bl	8000880 <CLI_UART_Send_String>
  {
 80009f0:	e7b3      	b.n	800095a <main+0x3a>
 80009f2:	bf00      	nop
 80009f4:	20000030 	.word	0x20000030
 80009f8:	08003ed4 	.word	0x08003ed4
 80009fc:	08003ee8 	.word	0x08003ee8
 8000a00:	08003eec 	.word	0x08003eec
 8000a04:	08003ef8 	.word	0x08003ef8
 8000a08:	08003f00 	.word	0x08003f00
 8000a0c:	08003f08 	.word	0x08003f08
 8000a10:	08003f10 	.word	0x08003f10
 8000a14:	08003f1c 	.word	0x08003f1c

08000a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b094      	sub	sp, #80	; 0x50
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 0320 	add.w	r3, r7, #32
 8000a22:	2230      	movs	r2, #48	; 0x30
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 fa02 	bl	8003e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	4a28      	ldr	r2, [pc, #160]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4c:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	4b23      	ldr	r3, [pc, #140]	; (8000aec <SystemClock_Config+0xd4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a64:	4a21      	ldr	r2, [pc, #132]	; (8000aec <SystemClock_Config+0xd4>)
 8000a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <SystemClock_Config+0xd4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a80:	2310      	movs	r3, #16
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a84:	2302      	movs	r3, #2
 8000a86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a90:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a96:	2304      	movs	r3, #4
 8000a98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a9a:	2307      	movs	r3, #7
 8000a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9e:	f107 0320 	add.w	r3, r7, #32
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 febe 	bl	8001824 <HAL_RCC_OscConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000aae:	f000 f81f 	bl	8000af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab2:	230f      	movs	r3, #15
 8000ab4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2102      	movs	r1, #2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 f9c8 	bl	8001e64 <HAL_RCC_ClockConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ada:	f000 f809 	bl	8000af0 <Error_Handler>
  }
}
 8000ade:	bf00      	nop
 8000ae0:	3750      	adds	r7, #80	; 0x50
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40007000 	.word	0x40007000

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b1a:	4a18      	ldr	r2, [pc, #96]	; (8000b7c <MX_SPI1_Init+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b34:	2202      	movs	r2, #2
 8000b36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b48:	2220      	movs	r2, #32
 8000b4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b60:	220a      	movs	r2, #10
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_SPI1_Init+0x64>)
 8000b66:	f001 fc17 	bl	8002398 <HAL_SPI_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b70:	f7ff ffbe 	bl	8000af0 <Error_Handler>
  }

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000034 	.word	0x20000034
 8000b7c:	40013000 	.word	0x40013000

08000b80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a19      	ldr	r2, [pc, #100]	; (8000c04 <HAL_SPI_MspInit+0x84>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d12b      	bne.n	8000bfa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bda:	23e0      	movs	r3, #224	; 0xe0
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bea:	2305      	movs	r3, #5
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <HAL_SPI_MspInit+0x8c>)
 8000bf6:	f000 fb29 	bl	800124c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40013000 	.word	0x40013000
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020000 	.word	0x40020000

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c4e:	2007      	movs	r0, #7
 8000c50:	f000 fa8c 	bl	800116c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb4:	f000 f96a 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000cc2:	f002 fa3f 	bl	8003144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000008c 	.word	0x2000008c

08000cd0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

extern void TMC2130_Step_TIM_ISR();
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
    {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

    if (htim == &htim11)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d101      	bne.n	8000ce4 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
	TMC2130_Step_TIM_ISR();
 8000ce0:	f7ff fdfe 	bl	80008e0 <TMC2130_Step_TIM_ISR>
	}

    }
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2000008c 	.word	0x2000008c

08000cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <SystemInit+0x28>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfa:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <SystemInit+0x28>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <SystemInit+0x28>)
 8000d06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d0a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <MX_TIM11_Init+0x3c>)
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <MX_TIM11_Init+0x40>)
 8000d24:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 83;
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_TIM11_Init+0x3c>)
 8000d28:	2253      	movs	r2, #83	; 0x53
 8000d2a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <MX_TIM11_Init+0x3c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_TIM11_Init+0x3c>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <MX_TIM11_Init+0x3c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_TIM11_Init+0x3c>)
 8000d40:	2280      	movs	r2, #128	; 0x80
 8000d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_TIM11_Init+0x3c>)
 8000d46:	f002 f95b 	bl	8003000 <HAL_TIM_Base_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8000d50:	f7ff fece 	bl	8000af0 <Error_Handler>
  }

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000008c 	.word	0x2000008c
 8000d5c:	40014800 	.word	0x40014800

08000d60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <HAL_TIM_Base_MspInit+0x48>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d115      	bne.n	8000d9e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <HAL_TIM_Base_MspInit+0x4c>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <HAL_TIM_Base_MspInit+0x4c>)
 8000d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d80:	6453      	str	r3, [r2, #68]	; 0x44
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_TIM_Base_MspInit+0x4c>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2100      	movs	r1, #0
 8000d92:	201a      	movs	r0, #26
 8000d94:	f000 fa0a 	bl	80011ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000d98:	201a      	movs	r0, #26
 8000d9a:	f000 fa33 	bl	8001204 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40014800 	.word	0x40014800
 8000dac:	40023800 	.word	0x40023800

08000db0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <MX_USART2_UART_Init+0x50>)
 8000db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dbc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000de8:	f002 fb70 	bl	80034cc <HAL_UART_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000df2:	f7ff fe7d 	bl	8000af0 <Error_Handler>
  }

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200000cc 	.word	0x200000cc
 8000e00:	40004400 	.word	0x40004400

08000e04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <HAL_UART_MspInit+0x84>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d12b      	bne.n	8000e7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <HAL_UART_MspInit+0x88>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <HAL_UART_MspInit+0x88>)
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_UART_MspInit+0x88>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_UART_MspInit+0x88>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <HAL_UART_MspInit+0x88>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_UART_MspInit+0x88>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e5e:	230c      	movs	r3, #12
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e6e:	2307      	movs	r3, #7
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <HAL_UART_MspInit+0x8c>)
 8000e7a:	f000 f9e7 	bl	800124c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	; 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40004400 	.word	0x40004400
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020000 	.word	0x40020000

08000e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ecc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e9a:	e003      	b.n	8000ea4 <LoopCopyDataInit>

08000e9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ea0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ea2:	3104      	adds	r1, #4

08000ea4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ea4:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ea8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000eaa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000eac:	d3f6      	bcc.n	8000e9c <CopyDataInit>
  ldr  r2, =_sbss
 8000eae:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000eb0:	e002      	b.n	8000eb8 <LoopFillZerobss>

08000eb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000eb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000eb4:	f842 3b04 	str.w	r3, [r2], #4

08000eb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000eba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ebc:	d3f9      	bcc.n	8000eb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ebe:	f7ff ff17 	bl	8000cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ec2:	f002 ff77 	bl	8003db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec6:	f7ff fd2b 	bl	8000920 <main>
  bx  lr    
 8000eca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ecc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000ed0:	080040cc 	.word	0x080040cc
  ldr  r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ed8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000edc:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000ee0:	20000110 	.word	0x20000110

08000ee4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee4:	e7fe      	b.n	8000ee4 <ADC_IRQHandler>
	...

08000ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0d      	ldr	r2, [pc, #52]	; (8000f28 <HAL_Init+0x40>)
 8000ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_Init+0x40>)
 8000efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <HAL_Init+0x40>)
 8000f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 f92b 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f000 f808 	bl	8000f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f1c:	f7ff fe78 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023c00 	.word	0x40023c00

08000f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x54>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x58>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f972 	bl	8001234 <HAL_SYSTICK_Config>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00e      	b.n	8000f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d80a      	bhi.n	8000f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f68:	f000 f920 	bl	80011ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <HAL_InitTick+0x5c>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000004 	.word	0x20000004
 8000f84:	2000000c 	.word	0x2000000c
 8000f88:	20000008 	.word	0x20000008

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	2000000c 	.word	0x2000000c
 8000fb0:	2000010c 	.word	0x2000010c

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	2000010c 	.word	0x2000010c

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	; (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800114c:	f7ff ff8e 	bl	800106c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b07      	cmp	r3, #7
 8001178:	d00f      	beq.n	800119a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b06      	cmp	r3, #6
 800117e:	d00c      	beq.n	800119a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b05      	cmp	r3, #5
 8001184:	d009      	beq.n	800119a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b04      	cmp	r3, #4
 800118a:	d006      	beq.n	800119a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b03      	cmp	r3, #3
 8001190:	d003      	beq.n	800119a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001192:	2192      	movs	r1, #146	; 0x92
 8001194:	4804      	ldr	r0, [pc, #16]	; (80011a8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001196:	f7ff fcb2 	bl	8000afe <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ff16 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	08003f20 	.word	0x08003f20

080011ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b0f      	cmp	r3, #15
 80011c2:	d903      	bls.n	80011cc <HAL_NVIC_SetPriority+0x20>
 80011c4:	21aa      	movs	r1, #170	; 0xaa
 80011c6:	480e      	ldr	r0, [pc, #56]	; (8001200 <HAL_NVIC_SetPriority+0x54>)
 80011c8:	f7ff fc99 	bl	8000afe <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	2b0f      	cmp	r3, #15
 80011d0:	d903      	bls.n	80011da <HAL_NVIC_SetPriority+0x2e>
 80011d2:	21ab      	movs	r1, #171	; 0xab
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <HAL_NVIC_SetPriority+0x54>)
 80011d6:	f7ff fc92 	bl	8000afe <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011da:	f7ff ff1b 	bl	8001014 <__NVIC_GetPriorityGrouping>
 80011de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	68b9      	ldr	r1, [r7, #8]
 80011e4:	6978      	ldr	r0, [r7, #20]
 80011e6:	f7ff ff6b 	bl	80010c0 <NVIC_EncodePriority>
 80011ea:	4602      	mov	r2, r0
 80011ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff3a 	bl	800106c <__NVIC_SetPriority>
}
 80011f8:	bf00      	nop
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	08003f20 	.word	0x08003f20

08001204 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	da03      	bge.n	800121e <HAL_NVIC_EnableIRQ+0x1a>
 8001216:	21be      	movs	r1, #190	; 0xbe
 8001218:	4805      	ldr	r0, [pc, #20]	; (8001230 <HAL_NVIC_EnableIRQ+0x2c>)
 800121a:	f7ff fc70 	bl	8000afe <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff04 	bl	8001030 <__NVIC_EnableIRQ>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	08003f20 	.word	0x08003f20

08001234 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff73 	bl	8001128 <SysTick_Config>
 8001242:	4603      	mov	r3, r0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a3b      	ldr	r2, [pc, #236]	; (8001354 <HAL_GPIO_Init+0x108>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d017      	beq.n	800129a <HAL_GPIO_Init+0x4e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a3a      	ldr	r2, [pc, #232]	; (8001358 <HAL_GPIO_Init+0x10c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d013      	beq.n	800129a <HAL_GPIO_Init+0x4e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a39      	ldr	r2, [pc, #228]	; (800135c <HAL_GPIO_Init+0x110>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d00f      	beq.n	800129a <HAL_GPIO_Init+0x4e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a38      	ldr	r2, [pc, #224]	; (8001360 <HAL_GPIO_Init+0x114>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d00b      	beq.n	800129a <HAL_GPIO_Init+0x4e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a37      	ldr	r2, [pc, #220]	; (8001364 <HAL_GPIO_Init+0x118>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d007      	beq.n	800129a <HAL_GPIO_Init+0x4e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a36      	ldr	r2, [pc, #216]	; (8001368 <HAL_GPIO_Init+0x11c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x4e>
 8001292:	21b3      	movs	r1, #179	; 0xb3
 8001294:	4835      	ldr	r0, [pc, #212]	; (800136c <HAL_GPIO_Init+0x120>)
 8001296:	f7ff fc32 	bl	8000afe <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d005      	beq.n	80012b0 <HAL_GPIO_Init+0x64>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	0c1b      	lsrs	r3, r3, #16
 80012aa:	041b      	lsls	r3, r3, #16
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x6c>
 80012b0:	21b4      	movs	r1, #180	; 0xb4
 80012b2:	482e      	ldr	r0, [pc, #184]	; (800136c <HAL_GPIO_Init+0x120>)
 80012b4:	f7ff fc23 	bl	8000afe <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d035      	beq.n	800132c <HAL_GPIO_Init+0xe0>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d031      	beq.n	800132c <HAL_GPIO_Init+0xe0>
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b11      	cmp	r3, #17
 80012ce:	d02d      	beq.n	800132c <HAL_GPIO_Init+0xe0>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d029      	beq.n	800132c <HAL_GPIO_Init+0xe0>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b12      	cmp	r3, #18
 80012de:	d025      	beq.n	800132c <HAL_GPIO_Init+0xe0>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4a22      	ldr	r2, [pc, #136]	; (8001370 <HAL_GPIO_Init+0x124>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d020      	beq.n	800132c <HAL_GPIO_Init+0xe0>
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4a21      	ldr	r2, [pc, #132]	; (8001374 <HAL_GPIO_Init+0x128>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d01b      	beq.n	800132c <HAL_GPIO_Init+0xe0>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a1f      	ldr	r2, [pc, #124]	; (8001378 <HAL_GPIO_Init+0x12c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d016      	beq.n	800132c <HAL_GPIO_Init+0xe0>
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	4a1e      	ldr	r2, [pc, #120]	; (800137c <HAL_GPIO_Init+0x130>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d011      	beq.n	800132c <HAL_GPIO_Init+0xe0>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <HAL_GPIO_Init+0x134>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d00c      	beq.n	800132c <HAL_GPIO_Init+0xe0>
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <HAL_GPIO_Init+0x138>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d007      	beq.n	800132c <HAL_GPIO_Init+0xe0>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b03      	cmp	r3, #3
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0xe0>
 8001324:	21b5      	movs	r1, #181	; 0xb5
 8001326:	4811      	ldr	r0, [pc, #68]	; (800136c <HAL_GPIO_Init+0x120>)
 8001328:	f7ff fbe9 	bl	8000afe <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00b      	beq.n	800134c <HAL_GPIO_Init+0x100>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d007      	beq.n	800134c <HAL_GPIO_Init+0x100>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x100>
 8001344:	21b6      	movs	r1, #182	; 0xb6
 8001346:	4809      	ldr	r0, [pc, #36]	; (800136c <HAL_GPIO_Init+0x120>)
 8001348:	f7ff fbd9 	bl	8000afe <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	e201      	b.n	8001756 <HAL_GPIO_Init+0x50a>
 8001352:	bf00      	nop
 8001354:	40020000 	.word	0x40020000
 8001358:	40020400 	.word	0x40020400
 800135c:	40020800 	.word	0x40020800
 8001360:	40020c00 	.word	0x40020c00
 8001364:	40021000 	.word	0x40021000
 8001368:	40021c00 	.word	0x40021c00
 800136c:	08003f5c 	.word	0x08003f5c
 8001370:	10110000 	.word	0x10110000
 8001374:	10210000 	.word	0x10210000
 8001378:	10310000 	.word	0x10310000
 800137c:	10120000 	.word	0x10120000
 8001380:	10220000 	.word	0x10220000
 8001384:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001388:	2201      	movs	r2, #1
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	f040 81d5 	bne.w	8001750 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d00b      	beq.n	80013c6 <HAL_GPIO_Init+0x17a>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d007      	beq.n	80013c6 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013ba:	2b11      	cmp	r3, #17
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b12      	cmp	r3, #18
 80013c4:	d144      	bne.n	8001450 <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00f      	beq.n	80013ee <HAL_GPIO_Init+0x1a2>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d00b      	beq.n	80013ee <HAL_GPIO_Init+0x1a2>
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d007      	beq.n	80013ee <HAL_GPIO_Init+0x1a2>
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x1a2>
 80013e6:	21c8      	movs	r1, #200	; 0xc8
 80013e8:	489e      	ldr	r0, [pc, #632]	; (8001664 <HAL_GPIO_Init+0x418>)
 80013ea:	f7ff fb88 	bl	8000afe <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	2203      	movs	r2, #3
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001424:	2201      	movs	r2, #1
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	091b      	lsrs	r3, r3, #4
 800143a:	f003 0201 	and.w	r2, r3, #1
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d004      	beq.n	8001492 <HAL_GPIO_Init+0x246>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b12      	cmp	r3, #18
 800148e:	f040 808c 	bne.w	80015aa <HAL_GPIO_Init+0x35e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d063      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	2b0c      	cmp	r3, #12
 80014a0:	d05f      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d05b      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d057      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d053      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d04f      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d04b      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d047      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d043      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d03f      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d03b      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d037      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	d033      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d02f      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	2b05      	cmp	r3, #5
 8001508:	d02b      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	2b05      	cmp	r3, #5
 8001510:	d027      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	2b06      	cmp	r3, #6
 8001518:	d023      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2b05      	cmp	r3, #5
 8001520:	d01f      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	2b07      	cmp	r3, #7
 8001528:	d01b      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	2b07      	cmp	r3, #7
 8001530:	d017      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	2b08      	cmp	r3, #8
 8001538:	d013      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	2b0a      	cmp	r3, #10
 8001540:	d00f      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	2b09      	cmp	r3, #9
 8001548:	d00b      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	2b09      	cmp	r3, #9
 8001550:	d007      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b0f      	cmp	r3, #15
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x316>
 800155a:	21e0      	movs	r1, #224	; 0xe0
 800155c:	4841      	ldr	r0, [pc, #260]	; (8001664 <HAL_GPIO_Init+0x418>)
 800155e:	f7ff face 	bl	8000afe <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	08da      	lsrs	r2, r3, #3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3208      	adds	r2, #8
 800156a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	220f      	movs	r2, #15
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	08da      	lsrs	r2, r3, #3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3208      	adds	r2, #8
 80015a4:	69b9      	ldr	r1, [r7, #24]
 80015a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 0203 	and.w	r2, r3, #3
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80b2 	beq.w	8001750 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HAL_GPIO_Init+0x41c>)
 80015f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f4:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <HAL_GPIO_Init+0x41c>)
 80015f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015fa:	6453      	str	r3, [r2, #68]	; 0x44
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_GPIO_Init+0x41c>)
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001608:	4a18      	ldr	r2, [pc, #96]	; (800166c <HAL_GPIO_Init+0x420>)
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	089b      	lsrs	r3, r3, #2
 800160e:	3302      	adds	r3, #2
 8001610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	220f      	movs	r2, #15
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a10      	ldr	r2, [pc, #64]	; (8001670 <HAL_GPIO_Init+0x424>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d029      	beq.n	8001688 <HAL_GPIO_Init+0x43c>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <HAL_GPIO_Init+0x428>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d023      	beq.n	8001684 <HAL_GPIO_Init+0x438>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <HAL_GPIO_Init+0x42c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d00d      	beq.n	8001660 <HAL_GPIO_Init+0x414>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a0d      	ldr	r2, [pc, #52]	; (800167c <HAL_GPIO_Init+0x430>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d007      	beq.n	800165c <HAL_GPIO_Init+0x410>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <HAL_GPIO_Init+0x434>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d101      	bne.n	8001658 <HAL_GPIO_Init+0x40c>
 8001654:	2304      	movs	r3, #4
 8001656:	e018      	b.n	800168a <HAL_GPIO_Init+0x43e>
 8001658:	2307      	movs	r3, #7
 800165a:	e016      	b.n	800168a <HAL_GPIO_Init+0x43e>
 800165c:	2303      	movs	r3, #3
 800165e:	e014      	b.n	800168a <HAL_GPIO_Init+0x43e>
 8001660:	2302      	movs	r3, #2
 8001662:	e012      	b.n	800168a <HAL_GPIO_Init+0x43e>
 8001664:	08003f5c 	.word	0x08003f5c
 8001668:	40023800 	.word	0x40023800
 800166c:	40013800 	.word	0x40013800
 8001670:	40020000 	.word	0x40020000
 8001674:	40020400 	.word	0x40020400
 8001678:	40020800 	.word	0x40020800
 800167c:	40020c00 	.word	0x40020c00
 8001680:	40021000 	.word	0x40021000
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <HAL_GPIO_Init+0x43e>
 8001688:	2300      	movs	r3, #0
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	f002 0203 	and.w	r2, r2, #3
 8001690:	0092      	lsls	r2, r2, #2
 8001692:	4093      	lsls	r3, r2
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800169a:	4933      	ldr	r1, [pc, #204]	; (8001768 <HAL_GPIO_Init+0x51c>)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3302      	adds	r3, #2
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016a8:	4b30      	ldr	r3, [pc, #192]	; (800176c <HAL_GPIO_Init+0x520>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016cc:	4a27      	ldr	r2, [pc, #156]	; (800176c <HAL_GPIO_Init+0x520>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016d2:	4b26      	ldr	r3, [pc, #152]	; (800176c <HAL_GPIO_Init+0x520>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016f6:	4a1d      	ldr	r2, [pc, #116]	; (800176c <HAL_GPIO_Init+0x520>)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_GPIO_Init+0x520>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001720:	4a12      	ldr	r2, [pc, #72]	; (800176c <HAL_GPIO_Init+0x520>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_GPIO_Init+0x520>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800174a:	4a08      	ldr	r2, [pc, #32]	; (800176c <HAL_GPIO_Init+0x520>)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	3301      	adds	r3, #1
 8001754:	61fb      	str	r3, [r7, #28]
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	f67f ae15 	bls.w	8001388 <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 800175e:	bf00      	nop
 8001760:	3720      	adds	r7, #32
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40013800 	.word	0x40013800
 800176c:	40013c00 	.word	0x40013c00

08001770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
 800177c:	4613      	mov	r3, r2
 800177e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d004      	beq.n	8001790 <HAL_GPIO_WritePin+0x20>
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	0c1b      	lsrs	r3, r3, #16
 800178a:	041b      	lsls	r3, r3, #16
 800178c:	2b00      	cmp	r3, #0
 800178e:	d004      	beq.n	800179a <HAL_GPIO_WritePin+0x2a>
 8001790:	f240 119f 	movw	r1, #415	; 0x19f
 8001794:	480e      	ldr	r0, [pc, #56]	; (80017d0 <HAL_GPIO_WritePin+0x60>)
 8001796:	f7ff f9b2 	bl	8000afe <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800179a:	787b      	ldrb	r3, [r7, #1]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <HAL_GPIO_WritePin+0x40>
 80017a0:	787b      	ldrb	r3, [r7, #1]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d004      	beq.n	80017b0 <HAL_GPIO_WritePin+0x40>
 80017a6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80017aa:	4809      	ldr	r0, [pc, #36]	; (80017d0 <HAL_GPIO_WritePin+0x60>)
 80017ac:	f7ff f9a7 	bl	8000afe <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80017b0:	787b      	ldrb	r3, [r7, #1]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017bc:	e003      	b.n	80017c6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	041a      	lsls	r2, r3, #16
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	619a      	str	r2, [r3, #24]
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	08003f5c 	.word	0x08003f5c

080017d4 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80017e0:	887b      	ldrh	r3, [r7, #2]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d004      	beq.n	80017f0 <HAL_GPIO_TogglePin+0x1c>
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	0c1b      	lsrs	r3, r3, #16
 80017ea:	041b      	lsls	r3, r3, #16
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d004      	beq.n	80017fa <HAL_GPIO_TogglePin+0x26>
 80017f0:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80017f4:	480a      	ldr	r0, [pc, #40]	; (8001820 <HAL_GPIO_TogglePin+0x4c>)
 80017f6:	f7ff f982 	bl	8000afe <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	887b      	ldrh	r3, [r7, #2]
 8001800:	401a      	ands	r2, r3
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	429a      	cmp	r2, r3
 8001806:	d104      	bne.n	8001812 <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	041a      	lsls	r2, r3, #16
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001810:	e002      	b.n	8001818 <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 8001812:	887a      	ldrh	r2, [r7, #2]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	619a      	str	r2, [r3, #24]
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	08003f5c 	.word	0x08003f5c

08001824 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e30d      	b.n	8001e52 <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b0f      	cmp	r3, #15
 800183c:	d903      	bls.n	8001846 <HAL_RCC_OscConfig+0x22>
 800183e:	21e8      	movs	r1, #232	; 0xe8
 8001840:	48a3      	ldr	r0, [pc, #652]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001842:	f7ff f95c 	bl	8000afe <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 8088 	beq.w	8001964 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00d      	beq.n	8001878 <HAL_RCC_OscConfig+0x54>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001864:	d008      	beq.n	8001878 <HAL_RCC_OscConfig+0x54>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800186e:	d003      	beq.n	8001878 <HAL_RCC_OscConfig+0x54>
 8001870:	21ed      	movs	r1, #237	; 0xed
 8001872:	4897      	ldr	r0, [pc, #604]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001874:	f7ff f943 	bl	8000afe <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001878:	4b96      	ldr	r3, [pc, #600]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b04      	cmp	r3, #4
 8001882:	d00c      	beq.n	800189e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001884:	4b93      	ldr	r3, [pc, #588]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800188c:	2b08      	cmp	r3, #8
 800188e:	d112      	bne.n	80018b6 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001890:	4b90      	ldr	r3, [pc, #576]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001898:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800189c:	d10b      	bne.n	80018b6 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189e:	4b8d      	ldr	r3, [pc, #564]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d05b      	beq.n	8001962 <HAL_RCC_OscConfig+0x13e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d157      	bne.n	8001962 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e2cd      	b.n	8001e52 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0xaa>
 80018c0:	4b84      	ldr	r3, [pc, #528]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a83      	ldr	r2, [pc, #524]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 80018c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	e01d      	b.n	800190a <HAL_RCC_OscConfig+0xe6>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d6:	d10c      	bne.n	80018f2 <HAL_RCC_OscConfig+0xce>
 80018d8:	4b7e      	ldr	r3, [pc, #504]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a7d      	ldr	r2, [pc, #500]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 80018de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b7b      	ldr	r3, [pc, #492]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a7a      	ldr	r2, [pc, #488]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 80018ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	e00b      	b.n	800190a <HAL_RCC_OscConfig+0xe6>
 80018f2:	4b78      	ldr	r3, [pc, #480]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a77      	ldr	r2, [pc, #476]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 80018f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b75      	ldr	r3, [pc, #468]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a74      	ldr	r2, [pc, #464]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 8001904:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001908:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d013      	beq.n	800193a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001912:	f7ff fb4f 	bl	8000fb4 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800191a:	f7ff fb4b 	bl	8000fb4 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b64      	cmp	r3, #100	; 0x64
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e292      	b.n	8001e52 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192c:	4b69      	ldr	r3, [pc, #420]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0xf6>
 8001938:	e014      	b.n	8001964 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff fb3b 	bl	8000fb4 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001942:	f7ff fb37 	bl	8000fb4 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b64      	cmp	r3, #100	; 0x64
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e27e      	b.n	8001e52 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001954:	4b5f      	ldr	r3, [pc, #380]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f0      	bne.n	8001942 <HAL_RCC_OscConfig+0x11e>
 8001960:	e000      	b.n	8001964 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001962:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d079      	beq.n	8001a64 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <HAL_RCC_OscConfig+0x166>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d004      	beq.n	800198a <HAL_RCC_OscConfig+0x166>
 8001980:	f240 111f 	movw	r1, #287	; 0x11f
 8001984:	4852      	ldr	r0, [pc, #328]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001986:	f7ff f8ba 	bl	8000afe <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	2b1f      	cmp	r3, #31
 8001990:	d904      	bls.n	800199c <HAL_RCC_OscConfig+0x178>
 8001992:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001996:	484e      	ldr	r0, [pc, #312]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001998:	f7ff f8b1 	bl	8000afe <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800199c:	4b4d      	ldr	r3, [pc, #308]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00b      	beq.n	80019c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019a8:	4b4a      	ldr	r3, [pc, #296]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d11c      	bne.n	80019ee <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b4:	4b47      	ldr	r3, [pc, #284]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d116      	bne.n	80019ee <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c0:	4b44      	ldr	r3, [pc, #272]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_OscConfig+0x1b4>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e23c      	b.n	8001e52 <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d8:	4b3e      	ldr	r3, [pc, #248]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	493b      	ldr	r1, [pc, #236]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ec:	e03a      	b.n	8001a64 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d020      	beq.n	8001a38 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <HAL_RCC_OscConfig+0x2b4>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff fada 	bl	8000fb4 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a04:	f7ff fad6 	bl	8000fb4 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e21d      	b.n	8001e52 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a22:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4928      	ldr	r1, [pc, #160]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]
 8001a36:	e015      	b.n	8001a64 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a38:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <HAL_RCC_OscConfig+0x2b4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3e:	f7ff fab9 	bl	8000fb4 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a46:	f7ff fab5 	bl	8000fb4 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e1fc      	b.n	8001e52 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a58:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f0      	bne.n	8001a46 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d046      	beq.n	8001afe <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <HAL_RCC_OscConfig+0x266>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d004      	beq.n	8001a8a <HAL_RCC_OscConfig+0x266>
 8001a80:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001a84:	4812      	ldr	r0, [pc, #72]	; (8001ad0 <HAL_RCC_OscConfig+0x2ac>)
 8001a86:	f7ff f83a 	bl	8000afe <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d016      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_RCC_OscConfig+0x2b8>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a98:	f7ff fa8c 	bl	8000fb4 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa0:	f7ff fa88 	bl	8000fb4 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e1cf      	b.n	8001e52 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_RCC_OscConfig+0x2b0>)
 8001ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x27c>
 8001abe:	e01e      	b.n	8001afe <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_RCC_OscConfig+0x2b8>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fa75 	bl	8000fb4 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001acc:	e011      	b.n	8001af2 <HAL_RCC_OscConfig+0x2ce>
 8001ace:	bf00      	nop
 8001ad0:	08003f98 	.word	0x08003f98
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	42470000 	.word	0x42470000
 8001adc:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae0:	f7ff fa68 	bl	8000fb4 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e1af      	b.n	8001e52 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af2:	4b97      	ldr	r3, [pc, #604]	; (8001d50 <HAL_RCC_OscConfig+0x52c>)
 8001af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 80a8 	beq.w	8001c5c <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00c      	beq.n	8001b32 <HAL_RCC_OscConfig+0x30e>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d008      	beq.n	8001b32 <HAL_RCC_OscConfig+0x30e>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b05      	cmp	r3, #5
 8001b26:	d004      	beq.n	8001b32 <HAL_RCC_OscConfig+0x30e>
 8001b28:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8001b2c:	4889      	ldr	r0, [pc, #548]	; (8001d54 <HAL_RCC_OscConfig+0x530>)
 8001b2e:	f7fe ffe6 	bl	8000afe <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b32:	4b87      	ldr	r3, [pc, #540]	; (8001d50 <HAL_RCC_OscConfig+0x52c>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10f      	bne.n	8001b5e <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	4b83      	ldr	r3, [pc, #524]	; (8001d50 <HAL_RCC_OscConfig+0x52c>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	4a82      	ldr	r2, [pc, #520]	; (8001d50 <HAL_RCC_OscConfig+0x52c>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4e:	4b80      	ldr	r3, [pc, #512]	; (8001d50 <HAL_RCC_OscConfig+0x52c>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5e:	4b7e      	ldr	r3, [pc, #504]	; (8001d58 <HAL_RCC_OscConfig+0x534>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d118      	bne.n	8001b9c <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b6a:	4b7b      	ldr	r3, [pc, #492]	; (8001d58 <HAL_RCC_OscConfig+0x534>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a7a      	ldr	r2, [pc, #488]	; (8001d58 <HAL_RCC_OscConfig+0x534>)
 8001b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b76:	f7ff fa1d 	bl	8000fb4 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7e:	f7ff fa19 	bl	8000fb4 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e160      	b.n	8001e52 <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b90:	4b71      	ldr	r3, [pc, #452]	; (8001d58 <HAL_RCC_OscConfig+0x534>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x38e>
 8001ba4:	4b6a      	ldr	r3, [pc, #424]	; (8001d50 <HAL_RCC_OscConfig+0x52c>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba8:	4a69      	ldr	r2, [pc, #420]	; (8001d50 <HAL_RCC_OscConfig+0x52c>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb0:	e01c      	b.n	8001bec <HAL_RCC_OscConfig+0x3c8>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b05      	cmp	r3, #5
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x3b0>
 8001bba:	4b65      	ldr	r3, [pc, #404]	; (8001d50 <HAL_RCC_OscConfig+0x52c>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbe:	4a64      	ldr	r2, [pc, #400]	; (8001d50 <HAL_RCC_OscConfig+0x52c>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc6:	4b62      	ldr	r3, [pc, #392]	; (8001d50 <HAL_RCC_OscConfig+0x52c>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bca:	4a61      	ldr	r2, [pc, #388]	; (8001d50 <HAL_RCC_OscConfig+0x52c>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd2:	e00b      	b.n	8001bec <HAL_RCC_OscConfig+0x3c8>
 8001bd4:	4b5e      	ldr	r3, [pc, #376]	; (8001d50 <HAL_RCC_OscConfig+0x52c>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd8:	4a5d      	ldr	r2, [pc, #372]	; (8001d50 <HAL_RCC_OscConfig+0x52c>)
 8001bda:	f023 0301 	bic.w	r3, r3, #1
 8001bde:	6713      	str	r3, [r2, #112]	; 0x70
 8001be0:	4b5b      	ldr	r3, [pc, #364]	; (8001d50 <HAL_RCC_OscConfig+0x52c>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be4:	4a5a      	ldr	r2, [pc, #360]	; (8001d50 <HAL_RCC_OscConfig+0x52c>)
 8001be6:	f023 0304 	bic.w	r3, r3, #4
 8001bea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d015      	beq.n	8001c20 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f9de 	bl	8000fb4 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bfc:	f7ff f9da 	bl	8000fb4 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e11f      	b.n	8001e52 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c12:	4b4f      	ldr	r3, [pc, #316]	; (8001d50 <HAL_RCC_OscConfig+0x52c>)
 8001c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0ee      	beq.n	8001bfc <HAL_RCC_OscConfig+0x3d8>
 8001c1e:	e014      	b.n	8001c4a <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c20:	f7ff f9c8 	bl	8000fb4 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c28:	f7ff f9c4 	bl	8000fb4 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e109      	b.n	8001e52 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3e:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <HAL_RCC_OscConfig+0x52c>)
 8001c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1ee      	bne.n	8001c28 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d105      	bne.n	8001c5c <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c50:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_RCC_OscConfig+0x52c>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	4a3e      	ldr	r2, [pc, #248]	; (8001d50 <HAL_RCC_OscConfig+0x52c>)
 8001c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00c      	beq.n	8001c7e <HAL_RCC_OscConfig+0x45a>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d008      	beq.n	8001c7e <HAL_RCC_OscConfig+0x45a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d004      	beq.n	8001c7e <HAL_RCC_OscConfig+0x45a>
 8001c74:	f240 11cf 	movw	r1, #463	; 0x1cf
 8001c78:	4836      	ldr	r0, [pc, #216]	; (8001d54 <HAL_RCC_OscConfig+0x530>)
 8001c7a:	f7fe ff40 	bl	8000afe <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80e4 	beq.w	8001e50 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c88:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <HAL_RCC_OscConfig+0x52c>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 030c 	and.w	r3, r3, #12
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	f000 80ae 	beq.w	8001df2 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	f040 8092 	bne.w	8001dc4 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d009      	beq.n	8001cbc <HAL_RCC_OscConfig+0x498>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cb0:	d004      	beq.n	8001cbc <HAL_RCC_OscConfig+0x498>
 8001cb2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001cb6:	4827      	ldr	r0, [pc, #156]	; (8001d54 <HAL_RCC_OscConfig+0x530>)
 8001cb8:	f7fe ff21 	bl	8000afe <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	2b3f      	cmp	r3, #63	; 0x3f
 8001cc2:	d904      	bls.n	8001cce <HAL_RCC_OscConfig+0x4aa>
 8001cc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8001cc8:	4822      	ldr	r0, [pc, #136]	; (8001d54 <HAL_RCC_OscConfig+0x530>)
 8001cca:	f7fe ff18 	bl	8000afe <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	2b31      	cmp	r3, #49	; 0x31
 8001cd4:	d904      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x4bc>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8001cde:	d904      	bls.n	8001cea <HAL_RCC_OscConfig+0x4c6>
 8001ce0:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8001ce4:	481b      	ldr	r0, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0x530>)
 8001ce6:	f7fe ff0a 	bl	8000afe <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d010      	beq.n	8001d14 <HAL_RCC_OscConfig+0x4f0>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d00c      	beq.n	8001d14 <HAL_RCC_OscConfig+0x4f0>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d008      	beq.n	8001d14 <HAL_RCC_OscConfig+0x4f0>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d004      	beq.n	8001d14 <HAL_RCC_OscConfig+0x4f0>
 8001d0a:	f240 11db 	movw	r1, #475	; 0x1db
 8001d0e:	4811      	ldr	r0, [pc, #68]	; (8001d54 <HAL_RCC_OscConfig+0x530>)
 8001d10:	f7fe fef5 	bl	8000afe <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d903      	bls.n	8001d24 <HAL_RCC_OscConfig+0x500>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	2b0f      	cmp	r3, #15
 8001d22:	d904      	bls.n	8001d2e <HAL_RCC_OscConfig+0x50a>
 8001d24:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8001d28:	480a      	ldr	r0, [pc, #40]	; (8001d54 <HAL_RCC_OscConfig+0x530>)
 8001d2a:	f7fe fee8 	bl	8000afe <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_RCC_OscConfig+0x538>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff f93e 	bl	8000fb4 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3a:	e011      	b.n	8001d60 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7ff f93a 	bl	8000fb4 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d90a      	bls.n	8001d60 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e081      	b.n	8001e52 <HAL_RCC_OscConfig+0x62e>
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	08003f98 	.word	0x08003f98
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d60:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <HAL_RCC_OscConfig+0x638>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1e7      	bne.n	8001d3c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69da      	ldr	r2, [r3, #28]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	019b      	lsls	r3, r3, #6
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	085b      	lsrs	r3, r3, #1
 8001d84:	3b01      	subs	r3, #1
 8001d86:	041b      	lsls	r3, r3, #16
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	061b      	lsls	r3, r3, #24
 8001d90:	4932      	ldr	r1, [pc, #200]	; (8001e5c <HAL_RCC_OscConfig+0x638>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d96:	4b32      	ldr	r3, [pc, #200]	; (8001e60 <HAL_RCC_OscConfig+0x63c>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff f90a 	bl	8000fb4 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da4:	f7ff f906 	bl	8000fb4 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e04d      	b.n	8001e52 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db6:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <HAL_RCC_OscConfig+0x638>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0x580>
 8001dc2:	e045      	b.n	8001e50 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc4:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <HAL_RCC_OscConfig+0x63c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dca:	f7ff f8f3 	bl	8000fb4 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd2:	f7ff f8ef 	bl	8000fb4 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e036      	b.n	8001e52 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de4:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_RCC_OscConfig+0x638>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f0      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x5ae>
 8001df0:	e02e      	b.n	8001e50 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e029      	b.n	8001e52 <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_RCC_OscConfig+0x638>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d11c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d115      	bne.n	8001e4c <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e26:	4013      	ands	r3, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d10d      	bne.n	8001e4c <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d106      	bne.n	8001e4c <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	42470060 	.word	0x42470060

08001e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e174      	b.n	8002162 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x24>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b0f      	cmp	r3, #15
 8001e86:	d904      	bls.n	8001e92 <HAL_RCC_ClockConfig+0x2e>
 8001e88:	f240 2151 	movw	r1, #593	; 0x251
 8001e8c:	487b      	ldr	r0, [pc, #492]	; (800207c <HAL_RCC_ClockConfig+0x218>)
 8001e8e:	f7fe fe36 	bl	8000afe <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d019      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x68>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d016      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x68>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d013      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x68>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d010      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x68>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d00d      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x68>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	d00a      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x68>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b06      	cmp	r3, #6
 8001eba:	d007      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x68>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2b07      	cmp	r3, #7
 8001ec0:	d004      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x68>
 8001ec2:	f240 2152 	movw	r1, #594	; 0x252
 8001ec6:	486d      	ldr	r0, [pc, #436]	; (800207c <HAL_RCC_ClockConfig+0x218>)
 8001ec8:	f7fe fe19 	bl	8000afe <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ecc:	4b6c      	ldr	r3, [pc, #432]	; (8002080 <HAL_RCC_ClockConfig+0x21c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d90c      	bls.n	8001ef4 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eda:	4b69      	ldr	r3, [pc, #420]	; (8002080 <HAL_RCC_ClockConfig+0x21c>)
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee2:	4b67      	ldr	r3, [pc, #412]	; (8002080 <HAL_RCC_ClockConfig+0x21c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e136      	b.n	8002162 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d049      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f0c:	4b5d      	ldr	r3, [pc, #372]	; (8002084 <HAL_RCC_ClockConfig+0x220>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4a5c      	ldr	r2, [pc, #368]	; (8002084 <HAL_RCC_ClockConfig+0x220>)
 8001f12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f24:	4b57      	ldr	r3, [pc, #348]	; (8002084 <HAL_RCC_ClockConfig+0x220>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	4a56      	ldr	r2, [pc, #344]	; (8002084 <HAL_RCC_ClockConfig+0x220>)
 8001f2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d024      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x11e>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b80      	cmp	r3, #128	; 0x80
 8001f3e:	d020      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x11e>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b90      	cmp	r3, #144	; 0x90
 8001f46:	d01c      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x11e>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2ba0      	cmp	r3, #160	; 0xa0
 8001f4e:	d018      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x11e>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2bb0      	cmp	r3, #176	; 0xb0
 8001f56:	d014      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x11e>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	2bc0      	cmp	r3, #192	; 0xc0
 8001f5e:	d010      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x11e>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2bd0      	cmp	r3, #208	; 0xd0
 8001f66:	d00c      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x11e>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2be0      	cmp	r3, #224	; 0xe0
 8001f6e:	d008      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x11e>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2bf0      	cmp	r3, #240	; 0xf0
 8001f76:	d004      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x11e>
 8001f78:	f240 2175 	movw	r1, #629	; 0x275
 8001f7c:	483f      	ldr	r0, [pc, #252]	; (800207c <HAL_RCC_ClockConfig+0x218>)
 8001f7e:	f7fe fdbe 	bl	8000afe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f82:	4b40      	ldr	r3, [pc, #256]	; (8002084 <HAL_RCC_ClockConfig+0x220>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	493d      	ldr	r1, [pc, #244]	; (8002084 <HAL_RCC_ClockConfig+0x220>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d059      	beq.n	8002054 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d010      	beq.n	8001fca <HAL_RCC_ClockConfig+0x166>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d00c      	beq.n	8001fca <HAL_RCC_ClockConfig+0x166>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d008      	beq.n	8001fca <HAL_RCC_ClockConfig+0x166>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d004      	beq.n	8001fca <HAL_RCC_ClockConfig+0x166>
 8001fc0:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8001fc4:	482d      	ldr	r0, [pc, #180]	; (800207c <HAL_RCC_ClockConfig+0x218>)
 8001fc6:	f7fe fd9a 	bl	8000afe <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d107      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <HAL_RCC_ClockConfig+0x220>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d119      	bne.n	8002012 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e0bf      	b.n	8002162 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d003      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d107      	bne.n	8002002 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <HAL_RCC_ClockConfig+0x220>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d109      	bne.n	8002012 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0af      	b.n	8002162 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <HAL_RCC_ClockConfig+0x220>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0a7      	b.n	8002162 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002012:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <HAL_RCC_ClockConfig+0x220>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f023 0203 	bic.w	r2, r3, #3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4919      	ldr	r1, [pc, #100]	; (8002084 <HAL_RCC_ClockConfig+0x220>)
 8002020:	4313      	orrs	r3, r2
 8002022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002024:	f7fe ffc6 	bl	8000fb4 <HAL_GetTick>
 8002028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202a:	e00a      	b.n	8002042 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202c:	f7fe ffc2 	bl	8000fb4 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e08f      	b.n	8002162 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <HAL_RCC_ClockConfig+0x220>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 020c 	and.w	r2, r3, #12
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	429a      	cmp	r2, r3
 8002052:	d1eb      	bne.n	800202c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_RCC_ClockConfig+0x21c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d212      	bcs.n	8002088 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <HAL_RCC_ClockConfig+0x21c>)
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_ClockConfig+0x21c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d007      	beq.n	8002088 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e072      	b.n	8002162 <HAL_RCC_ClockConfig+0x2fe>
 800207c:	08003f98 	.word	0x08003f98
 8002080:	40023c00 	.word	0x40023c00
 8002084:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d025      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d018      	beq.n	80020ce <HAL_RCC_ClockConfig+0x26a>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a4:	d013      	beq.n	80020ce <HAL_RCC_ClockConfig+0x26a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80020ae:	d00e      	beq.n	80020ce <HAL_RCC_ClockConfig+0x26a>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80020b8:	d009      	beq.n	80020ce <HAL_RCC_ClockConfig+0x26a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80020c2:	d004      	beq.n	80020ce <HAL_RCC_ClockConfig+0x26a>
 80020c4:	f240 21ba 	movw	r1, #698	; 0x2ba
 80020c8:	4828      	ldr	r0, [pc, #160]	; (800216c <HAL_RCC_ClockConfig+0x308>)
 80020ca:	f7fe fd18 	bl	8000afe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ce:	4b28      	ldr	r3, [pc, #160]	; (8002170 <HAL_RCC_ClockConfig+0x30c>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	4925      	ldr	r1, [pc, #148]	; (8002170 <HAL_RCC_ClockConfig+0x30c>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d026      	beq.n	800213a <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d018      	beq.n	8002126 <HAL_RCC_ClockConfig+0x2c2>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020fc:	d013      	beq.n	8002126 <HAL_RCC_ClockConfig+0x2c2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002106:	d00e      	beq.n	8002126 <HAL_RCC_ClockConfig+0x2c2>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002110:	d009      	beq.n	8002126 <HAL_RCC_ClockConfig+0x2c2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800211a:	d004      	beq.n	8002126 <HAL_RCC_ClockConfig+0x2c2>
 800211c:	f240 21c1 	movw	r1, #705	; 0x2c1
 8002120:	4812      	ldr	r0, [pc, #72]	; (800216c <HAL_RCC_ClockConfig+0x308>)
 8002122:	f7fe fcec 	bl	8000afe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002126:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_RCC_ClockConfig+0x30c>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	490e      	ldr	r1, [pc, #56]	; (8002170 <HAL_RCC_ClockConfig+0x30c>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800213a:	f000 f821 	bl	8002180 <HAL_RCC_GetSysClockFreq>
 800213e:	4601      	mov	r1, r0
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_RCC_ClockConfig+0x30c>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <HAL_RCC_ClockConfig+0x310>)
 800214c:	5cd3      	ldrb	r3, [r2, r3]
 800214e:	fa21 f303 	lsr.w	r3, r1, r3
 8002152:	4a09      	ldr	r2, [pc, #36]	; (8002178 <HAL_RCC_ClockConfig+0x314>)
 8002154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_RCC_ClockConfig+0x318>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fee6 	bl	8000f2c <HAL_InitTick>

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	08003f98 	.word	0x08003f98
 8002170:	40023800 	.word	0x40023800
 8002174:	0800407c 	.word	0x0800407c
 8002178:	20000004 	.word	0x20000004
 800217c:	20000008 	.word	0x20000008

08002180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	2300      	movs	r3, #0
 8002190:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002196:	4b63      	ldr	r3, [pc, #396]	; (8002324 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d007      	beq.n	80021b2 <HAL_RCC_GetSysClockFreq+0x32>
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d008      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0x38>
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 80b4 	bne.w	8002314 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021ac:	4b5e      	ldr	r3, [pc, #376]	; (8002328 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80021ae:	60bb      	str	r3, [r7, #8]
       break;
 80021b0:	e0b3      	b.n	800231a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021b2:	4b5e      	ldr	r3, [pc, #376]	; (800232c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80021b4:	60bb      	str	r3, [r7, #8]
      break;
 80021b6:	e0b0      	b.n	800231a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021b8:	4b5a      	ldr	r3, [pc, #360]	; (8002324 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021c2:	4b58      	ldr	r3, [pc, #352]	; (8002324 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d04a      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ce:	4b55      	ldr	r3, [pc, #340]	; (8002324 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	099b      	lsrs	r3, r3, #6
 80021d4:	f04f 0400 	mov.w	r4, #0
 80021d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	ea03 0501 	and.w	r5, r3, r1
 80021e4:	ea04 0602 	and.w	r6, r4, r2
 80021e8:	4629      	mov	r1, r5
 80021ea:	4632      	mov	r2, r6
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	f04f 0400 	mov.w	r4, #0
 80021f4:	0154      	lsls	r4, r2, #5
 80021f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021fa:	014b      	lsls	r3, r1, #5
 80021fc:	4619      	mov	r1, r3
 80021fe:	4622      	mov	r2, r4
 8002200:	1b49      	subs	r1, r1, r5
 8002202:	eb62 0206 	sbc.w	r2, r2, r6
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	f04f 0400 	mov.w	r4, #0
 800220e:	0194      	lsls	r4, r2, #6
 8002210:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002214:	018b      	lsls	r3, r1, #6
 8002216:	1a5b      	subs	r3, r3, r1
 8002218:	eb64 0402 	sbc.w	r4, r4, r2
 800221c:	f04f 0100 	mov.w	r1, #0
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	00e2      	lsls	r2, r4, #3
 8002226:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800222a:	00d9      	lsls	r1, r3, #3
 800222c:	460b      	mov	r3, r1
 800222e:	4614      	mov	r4, r2
 8002230:	195b      	adds	r3, r3, r5
 8002232:	eb44 0406 	adc.w	r4, r4, r6
 8002236:	f04f 0100 	mov.w	r1, #0
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	0262      	lsls	r2, r4, #9
 8002240:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002244:	0259      	lsls	r1, r3, #9
 8002246:	460b      	mov	r3, r1
 8002248:	4614      	mov	r4, r2
 800224a:	4618      	mov	r0, r3
 800224c:	4621      	mov	r1, r4
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f04f 0400 	mov.w	r4, #0
 8002254:	461a      	mov	r2, r3
 8002256:	4623      	mov	r3, r4
 8002258:	f7fd ffbc 	bl	80001d4 <__aeabi_uldivmod>
 800225c:	4603      	mov	r3, r0
 800225e:	460c      	mov	r4, r1
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	e049      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002264:	4b2f      	ldr	r3, [pc, #188]	; (8002324 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	099b      	lsrs	r3, r3, #6
 800226a:	f04f 0400 	mov.w	r4, #0
 800226e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	ea03 0501 	and.w	r5, r3, r1
 800227a:	ea04 0602 	and.w	r6, r4, r2
 800227e:	4629      	mov	r1, r5
 8002280:	4632      	mov	r2, r6
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	f04f 0400 	mov.w	r4, #0
 800228a:	0154      	lsls	r4, r2, #5
 800228c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002290:	014b      	lsls	r3, r1, #5
 8002292:	4619      	mov	r1, r3
 8002294:	4622      	mov	r2, r4
 8002296:	1b49      	subs	r1, r1, r5
 8002298:	eb62 0206 	sbc.w	r2, r2, r6
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	f04f 0400 	mov.w	r4, #0
 80022a4:	0194      	lsls	r4, r2, #6
 80022a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022aa:	018b      	lsls	r3, r1, #6
 80022ac:	1a5b      	subs	r3, r3, r1
 80022ae:	eb64 0402 	sbc.w	r4, r4, r2
 80022b2:	f04f 0100 	mov.w	r1, #0
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	00e2      	lsls	r2, r4, #3
 80022bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022c0:	00d9      	lsls	r1, r3, #3
 80022c2:	460b      	mov	r3, r1
 80022c4:	4614      	mov	r4, r2
 80022c6:	195b      	adds	r3, r3, r5
 80022c8:	eb44 0406 	adc.w	r4, r4, r6
 80022cc:	f04f 0100 	mov.w	r1, #0
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	02a2      	lsls	r2, r4, #10
 80022d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022da:	0299      	lsls	r1, r3, #10
 80022dc:	460b      	mov	r3, r1
 80022de:	4614      	mov	r4, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	4621      	mov	r1, r4
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f04f 0400 	mov.w	r4, #0
 80022ea:	461a      	mov	r2, r3
 80022ec:	4623      	mov	r3, r4
 80022ee:	f7fd ff71 	bl	80001d4 <__aeabi_uldivmod>
 80022f2:	4603      	mov	r3, r0
 80022f4:	460c      	mov	r4, r1
 80022f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	0c1b      	lsrs	r3, r3, #16
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	3301      	adds	r3, #1
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002310:	60bb      	str	r3, [r7, #8]
      break;
 8002312:	e002      	b.n	800231a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002316:	60bb      	str	r3, [r7, #8]
      break;
 8002318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800231a:	68bb      	ldr	r3, [r7, #8]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002324:	40023800 	.word	0x40023800
 8002328:	00f42400 	.word	0x00f42400
 800232c:	007a1200 	.word	0x007a1200

08002330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <HAL_RCC_GetHCLKFreq+0x14>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000004 	.word	0x20000004

08002348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800234c:	f7ff fff0 	bl	8002330 <HAL_RCC_GetHCLKFreq>
 8002350:	4601      	mov	r1, r0
 8002352:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	0a9b      	lsrs	r3, r3, #10
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	4a03      	ldr	r2, [pc, #12]	; (800236c <HAL_RCC_GetPCLK1Freq+0x24>)
 800235e:	5cd3      	ldrb	r3, [r2, r3]
 8002360:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40023800 	.word	0x40023800
 800236c:	0800408c 	.word	0x0800408c

08002370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002374:	f7ff ffdc 	bl	8002330 <HAL_RCC_GetHCLKFreq>
 8002378:	4601      	mov	r1, r0
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	0b5b      	lsrs	r3, r3, #13
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	4a03      	ldr	r2, [pc, #12]	; (8002394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002386:	5cd3      	ldrb	r3, [r2, r3]
 8002388:	fa21 f303 	lsr.w	r3, r1, r3
}
 800238c:	4618      	mov	r0, r3
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40023800 	.word	0x40023800
 8002394:	0800408c 	.word	0x0800408c

08002398 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e10e      	b.n	80025c8 <HAL_SPI_Init+0x230>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a88      	ldr	r2, [pc, #544]	; (80025d0 <HAL_SPI_Init+0x238>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d013      	beq.n	80023dc <HAL_SPI_Init+0x44>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a86      	ldr	r2, [pc, #536]	; (80025d4 <HAL_SPI_Init+0x23c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d00e      	beq.n	80023dc <HAL_SPI_Init+0x44>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a85      	ldr	r2, [pc, #532]	; (80025d8 <HAL_SPI_Init+0x240>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d009      	beq.n	80023dc <HAL_SPI_Init+0x44>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a83      	ldr	r2, [pc, #524]	; (80025dc <HAL_SPI_Init+0x244>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d004      	beq.n	80023dc <HAL_SPI_Init+0x44>
 80023d2:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80023d6:	4882      	ldr	r0, [pc, #520]	; (80025e0 <HAL_SPI_Init+0x248>)
 80023d8:	f7fe fb91 	bl	8000afe <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d009      	beq.n	80023f8 <HAL_SPI_Init+0x60>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ec:	d004      	beq.n	80023f8 <HAL_SPI_Init+0x60>
 80023ee:	f240 1143 	movw	r1, #323	; 0x143
 80023f2:	487b      	ldr	r0, [pc, #492]	; (80025e0 <HAL_SPI_Init+0x248>)
 80023f4:	f7fe fb83 	bl	8000afe <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00e      	beq.n	800241e <HAL_SPI_Init+0x86>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002408:	d009      	beq.n	800241e <HAL_SPI_Init+0x86>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002412:	d004      	beq.n	800241e <HAL_SPI_Init+0x86>
 8002414:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8002418:	4871      	ldr	r0, [pc, #452]	; (80025e0 <HAL_SPI_Init+0x248>)
 800241a:	f7fe fb70 	bl	8000afe <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002426:	d008      	beq.n	800243a <HAL_SPI_Init+0xa2>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d004      	beq.n	800243a <HAL_SPI_Init+0xa2>
 8002430:	f240 1145 	movw	r1, #325	; 0x145
 8002434:	486a      	ldr	r0, [pc, #424]	; (80025e0 <HAL_SPI_Init+0x248>)
 8002436:	f7fe fb62 	bl	8000afe <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002442:	d00d      	beq.n	8002460 <HAL_SPI_Init+0xc8>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d009      	beq.n	8002460 <HAL_SPI_Init+0xc8>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002454:	d004      	beq.n	8002460 <HAL_SPI_Init+0xc8>
 8002456:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800245a:	4861      	ldr	r0, [pc, #388]	; (80025e0 <HAL_SPI_Init+0x248>)
 800245c:	f7fe fb4f 	bl	8000afe <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d020      	beq.n	80024aa <HAL_SPI_Init+0x112>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	2b08      	cmp	r3, #8
 800246e:	d01c      	beq.n	80024aa <HAL_SPI_Init+0x112>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	2b10      	cmp	r3, #16
 8002476:	d018      	beq.n	80024aa <HAL_SPI_Init+0x112>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	2b18      	cmp	r3, #24
 800247e:	d014      	beq.n	80024aa <HAL_SPI_Init+0x112>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	2b20      	cmp	r3, #32
 8002486:	d010      	beq.n	80024aa <HAL_SPI_Init+0x112>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	2b28      	cmp	r3, #40	; 0x28
 800248e:	d00c      	beq.n	80024aa <HAL_SPI_Init+0x112>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	2b30      	cmp	r3, #48	; 0x30
 8002496:	d008      	beq.n	80024aa <HAL_SPI_Init+0x112>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	2b38      	cmp	r3, #56	; 0x38
 800249e:	d004      	beq.n	80024aa <HAL_SPI_Init+0x112>
 80024a0:	f240 1147 	movw	r1, #327	; 0x147
 80024a4:	484e      	ldr	r0, [pc, #312]	; (80025e0 <HAL_SPI_Init+0x248>)
 80024a6:	f7fe fb2a 	bl	8000afe <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d008      	beq.n	80024c4 <HAL_SPI_Init+0x12c>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	2b80      	cmp	r3, #128	; 0x80
 80024b8:	d004      	beq.n	80024c4 <HAL_SPI_Init+0x12c>
 80024ba:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80024be:	4848      	ldr	r0, [pc, #288]	; (80025e0 <HAL_SPI_Init+0x248>)
 80024c0:	f7fe fb1d 	bl	8000afe <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_SPI_Init+0x146>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d004      	beq.n	80024de <HAL_SPI_Init+0x146>
 80024d4:	f240 1149 	movw	r1, #329	; 0x149
 80024d8:	4841      	ldr	r0, [pc, #260]	; (80025e0 <HAL_SPI_Init+0x248>)
 80024da:	f7fe fb10 	bl	8000afe <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d119      	bne.n	800251a <HAL_SPI_Init+0x182>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d008      	beq.n	8002500 <HAL_SPI_Init+0x168>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d004      	beq.n	8002500 <HAL_SPI_Init+0x168>
 80024f6:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80024fa:	4839      	ldr	r0, [pc, #228]	; (80025e0 <HAL_SPI_Init+0x248>)
 80024fc:	f7fe faff 	bl	8000afe <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_SPI_Init+0x182>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d004      	beq.n	800251a <HAL_SPI_Init+0x182>
 8002510:	f240 114d 	movw	r1, #333	; 0x14d
 8002514:	4832      	ldr	r0, [pc, #200]	; (80025e0 <HAL_SPI_Init+0x248>)
 8002516:	f7fe faf2 	bl	8000afe <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d106      	bne.n	800253a <HAL_SPI_Init+0x1a2>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7fe fb23 	bl	8000b80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2202      	movs	r2, #2
 800253e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002550:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	ea42 0103 	orr.w	r1, r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	0c1b      	lsrs	r3, r3, #16
 8002598:	f003 0104 	and.w	r1, r3, #4
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	69da      	ldr	r2, [r3, #28]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40013000 	.word	0x40013000
 80025d4:	40003800 	.word	0x40003800
 80025d8:	40003c00 	.word	0x40003c00
 80025dc:	40013400 	.word	0x40013400
 80025e0:	08003fd0 	.word	0x08003fd0

080025e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	4613      	mov	r3, r2
 80025f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d009      	beq.n	8002614 <HAL_SPI_Transmit+0x30>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002608:	d004      	beq.n	8002614 <HAL_SPI_Transmit+0x30>
 800260a:	f240 21f2 	movw	r1, #754	; 0x2f2
 800260e:	4896      	ldr	r0, [pc, #600]	; (8002868 <HAL_SPI_Transmit+0x284>)
 8002610:	f7fe fa75 	bl	8000afe <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_SPI_Transmit+0x3e>
 800261e:	2302      	movs	r3, #2
 8002620:	e11e      	b.n	8002860 <HAL_SPI_Transmit+0x27c>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800262a:	f7fe fcc3 	bl	8000fb4 <HAL_GetTick>
 800262e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d002      	beq.n	8002646 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8002640:	2302      	movs	r3, #2
 8002642:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002644:	e103      	b.n	800284e <HAL_SPI_Transmit+0x26a>
  }

  if ((pData == NULL) || (Size == 0U))
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <HAL_SPI_Transmit+0x6e>
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d102      	bne.n	8002658 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002656:	e0fa      	b.n	800284e <HAL_SPI_Transmit+0x26a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2203      	movs	r2, #3
 800265c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	88fa      	ldrh	r2, [r7, #6]
 8002670:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	88fa      	ldrh	r2, [r7, #6]
 8002676:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800269e:	d107      	bne.n	80026b0 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ba:	2b40      	cmp	r3, #64	; 0x40
 80026bc:	d007      	beq.n	80026ce <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026d6:	d14b      	bne.n	8002770 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <HAL_SPI_Transmit+0x102>
 80026e0:	8afb      	ldrh	r3, [r7, #22]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d13e      	bne.n	8002764 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	881a      	ldrh	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	1c9a      	adds	r2, r3, #2
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800270a:	e02b      	b.n	8002764 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b02      	cmp	r3, #2
 8002718:	d112      	bne.n	8002740 <HAL_SPI_Transmit+0x15c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	881a      	ldrh	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	1c9a      	adds	r2, r3, #2
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002734:	b29b      	uxth	r3, r3
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	86da      	strh	r2, [r3, #54]	; 0x36
 800273e:	e011      	b.n	8002764 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002740:	f7fe fc38 	bl	8000fb4 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d803      	bhi.n	8002758 <HAL_SPI_Transmit+0x174>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002756:	d102      	bne.n	800275e <HAL_SPI_Transmit+0x17a>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d102      	bne.n	8002764 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002762:	e074      	b.n	800284e <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002768:	b29b      	uxth	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1ce      	bne.n	800270c <HAL_SPI_Transmit+0x128>
 800276e:	e04c      	b.n	800280a <HAL_SPI_Transmit+0x226>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <HAL_SPI_Transmit+0x19a>
 8002778:	8afb      	ldrh	r3, [r7, #22]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d140      	bne.n	8002800 <HAL_SPI_Transmit+0x21c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	330c      	adds	r3, #12
 8002788:	7812      	ldrb	r2, [r2, #0]
 800278a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800279a:	b29b      	uxth	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80027a4:	e02c      	b.n	8002800 <HAL_SPI_Transmit+0x21c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d113      	bne.n	80027dc <HAL_SPI_Transmit+0x1f8>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	330c      	adds	r3, #12
 80027be:	7812      	ldrb	r2, [r2, #0]
 80027c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80027da:	e011      	b.n	8002800 <HAL_SPI_Transmit+0x21c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027dc:	f7fe fbea 	bl	8000fb4 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d803      	bhi.n	80027f4 <HAL_SPI_Transmit+0x210>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027f2:	d102      	bne.n	80027fa <HAL_SPI_Transmit+0x216>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d102      	bne.n	8002800 <HAL_SPI_Transmit+0x21c>
        {
          errorcode = HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027fe:	e026      	b.n	800284e <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1cd      	bne.n	80027a6 <HAL_SPI_Transmit+0x1c2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	6839      	ldr	r1, [r7, #0]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fbb4 	bl	8002f7c <SPI_EndRxTxTransaction>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <HAL_SPI_Transmit+0x23c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10a      	bne.n	800283e <HAL_SPI_Transmit+0x25a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002828:	2300      	movs	r3, #0
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <HAL_SPI_Transmit+0x268>
  {
    errorcode = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	77fb      	strb	r3, [r7, #31]
 800284a:	e000      	b.n	800284e <HAL_SPI_Transmit+0x26a>
  }

error:
 800284c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800285e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3720      	adds	r7, #32
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	08003fd0 	.word	0x08003fd0

0800286c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af02      	add	r7, sp, #8
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	4613      	mov	r3, r2
 800287a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002888:	d112      	bne.n	80028b0 <HAL_SPI_Receive+0x44>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10e      	bne.n	80028b0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2204      	movs	r2, #4
 8002896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800289a:	88fa      	ldrh	r2, [r7, #6]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	68b9      	ldr	r1, [r7, #8]
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f8ea 	bl	8002a80 <HAL_SPI_TransmitReceive>
 80028ac:	4603      	mov	r3, r0
 80028ae:	e0e2      	b.n	8002a76 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_SPI_Receive+0x52>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e0db      	b.n	8002a76 <HAL_SPI_Receive+0x20a>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028c6:	f7fe fb75 	bl	8000fb4 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d002      	beq.n	80028de <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80028d8:	2302      	movs	r3, #2
 80028da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028dc:	e0c2      	b.n	8002a64 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <HAL_SPI_Receive+0x7e>
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028ee:	e0b9      	b.n	8002a64 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2204      	movs	r2, #4
 80028f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	88fa      	ldrh	r2, [r7, #6]
 8002908:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	88fa      	ldrh	r2, [r7, #6]
 800290e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002936:	d107      	bne.n	8002948 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002946:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002952:	2b40      	cmp	r3, #64	; 0x40
 8002954:	d007      	beq.n	8002966 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002964:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d162      	bne.n	8002a34 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800296e:	e02e      	b.n	80029ce <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d115      	bne.n	80029aa <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f103 020c 	add.w	r2, r3, #12
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298a:	7812      	ldrb	r2, [r2, #0]
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029a8:	e011      	b.n	80029ce <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029aa:	f7fe fb03 	bl	8000fb4 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d803      	bhi.n	80029c2 <HAL_SPI_Receive+0x156>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029c0:	d102      	bne.n	80029c8 <HAL_SPI_Receive+0x15c>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80029cc:	e04a      	b.n	8002a64 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1cb      	bne.n	8002970 <HAL_SPI_Receive+0x104>
 80029d8:	e031      	b.n	8002a3e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d113      	bne.n	8002a10 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	b292      	uxth	r2, r2
 80029f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fa:	1c9a      	adds	r2, r3, #2
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a0e:	e011      	b.n	8002a34 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a10:	f7fe fad0 	bl	8000fb4 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d803      	bhi.n	8002a28 <HAL_SPI_Receive+0x1bc>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a26:	d102      	bne.n	8002a2e <HAL_SPI_Receive+0x1c2>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d102      	bne.n	8002a34 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002a32:	e017      	b.n	8002a64 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1cd      	bne.n	80029da <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	6839      	ldr	r1, [r7, #0]
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 fa34 	bl	8002eb0 <SPI_EndRxTransaction>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	75fb      	strb	r3, [r7, #23]
 8002a60:	e000      	b.n	8002a64 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002a62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08c      	sub	sp, #48	; 0x30
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d004      	beq.n	8002aaa <HAL_SPI_TransmitReceive+0x2a>
 8002aa0:	f240 415a 	movw	r1, #1114	; 0x45a
 8002aa4:	4884      	ldr	r0, [pc, #528]	; (8002cb8 <HAL_SPI_TransmitReceive+0x238>)
 8002aa6:	f7fe f82a 	bl	8000afe <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_SPI_TransmitReceive+0x38>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e18d      	b.n	8002dd4 <HAL_SPI_TransmitReceive+0x354>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ac0:	f7fe fa78 	bl	8000fb4 <HAL_GetTick>
 8002ac4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002ad6:	887b      	ldrh	r3, [r7, #2]
 8002ad8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ada:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d00f      	beq.n	8002b02 <HAL_SPI_TransmitReceive+0x82>
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ae8:	d107      	bne.n	8002afa <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d103      	bne.n	8002afa <HAL_SPI_TransmitReceive+0x7a>
 8002af2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d003      	beq.n	8002b02 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8002afa:	2302      	movs	r3, #2
 8002afc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b00:	e15e      	b.n	8002dc0 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_SPI_TransmitReceive+0x94>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <HAL_SPI_TransmitReceive+0x94>
 8002b0e:	887b      	ldrh	r3, [r7, #2]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d103      	bne.n	8002b1c <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b1a:	e151      	b.n	8002dc0 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d003      	beq.n	8002b30 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2205      	movs	r2, #5
 8002b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	887a      	ldrh	r2, [r7, #2]
 8002b46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	887a      	ldrh	r2, [r7, #2]
 8002b52:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	887a      	ldrh	r2, [r7, #2]
 8002b58:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b70:	2b40      	cmp	r3, #64	; 0x40
 8002b72:	d007      	beq.n	8002b84 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b8c:	d178      	bne.n	8002c80 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_SPI_TransmitReceive+0x11c>
 8002b96:	8b7b      	ldrh	r3, [r7, #26]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d166      	bne.n	8002c6a <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	881a      	ldrh	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	1c9a      	adds	r2, r3, #2
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bc0:	e053      	b.n	8002c6a <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d11b      	bne.n	8002c08 <HAL_SPI_TransmitReceive+0x188>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d016      	beq.n	8002c08 <HAL_SPI_TransmitReceive+0x188>
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d113      	bne.n	8002c08 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	881a      	ldrh	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	1c9a      	adds	r2, r3, #2
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d119      	bne.n	8002c4a <HAL_SPI_TransmitReceive+0x1ca>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d014      	beq.n	8002c4a <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	b292      	uxth	r2, r2
 8002c2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c32:	1c9a      	adds	r2, r3, #2
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c46:	2301      	movs	r3, #1
 8002c48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c4a:	f7fe f9b3 	bl	8000fb4 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d807      	bhi.n	8002c6a <HAL_SPI_TransmitReceive+0x1ea>
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c60:	d003      	beq.n	8002c6a <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c68:	e0aa      	b.n	8002dc0 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1a6      	bne.n	8002bc2 <HAL_SPI_TransmitReceive+0x142>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1a1      	bne.n	8002bc2 <HAL_SPI_TransmitReceive+0x142>
 8002c7e:	e07f      	b.n	8002d80 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <HAL_SPI_TransmitReceive+0x20e>
 8002c88:	8b7b      	ldrh	r3, [r7, #26]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d16e      	bne.n	8002d6c <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	330c      	adds	r3, #12
 8002c98:	7812      	ldrb	r2, [r2, #0]
 8002c9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cb4:	e05a      	b.n	8002d6c <HAL_SPI_TransmitReceive+0x2ec>
 8002cb6:	bf00      	nop
 8002cb8:	08003fd0 	.word	0x08003fd0
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d11c      	bne.n	8002d04 <HAL_SPI_TransmitReceive+0x284>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d017      	beq.n	8002d04 <HAL_SPI_TransmitReceive+0x284>
 8002cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d114      	bne.n	8002d04 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	330c      	adds	r3, #12
 8002ce4:	7812      	ldrb	r2, [r2, #0]
 8002ce6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d119      	bne.n	8002d46 <HAL_SPI_TransmitReceive+0x2c6>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d014      	beq.n	8002d46 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d42:	2301      	movs	r3, #1
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d46:	f7fe f935 	bl	8000fb4 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d803      	bhi.n	8002d5e <HAL_SPI_TransmitReceive+0x2de>
 8002d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d5c:	d102      	bne.n	8002d64 <HAL_SPI_TransmitReceive+0x2e4>
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d103      	bne.n	8002d6c <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d6a:	e029      	b.n	8002dc0 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1a2      	bne.n	8002cbc <HAL_SPI_TransmitReceive+0x23c>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d19d      	bne.n	8002cbc <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f8f9 	bl	8002f7c <SPI_EndRxTxTransaction>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d006      	beq.n	8002d9e <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d9c:	e010      	b.n	8002dc0 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10b      	bne.n	8002dbe <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	e000      	b.n	8002dc0 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8002dbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3730      	adds	r7, #48	; 0x30
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dec:	e04c      	b.n	8002e88 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df4:	d048      	beq.n	8002e88 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002df6:	f7fe f8dd 	bl	8000fb4 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d902      	bls.n	8002e0c <SPI_WaitFlagStateUntilTimeout+0x30>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d13d      	bne.n	8002e88 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e24:	d111      	bne.n	8002e4a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e2e:	d004      	beq.n	8002e3a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e38:	d107      	bne.n	8002e4a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e52:	d10f      	bne.n	8002e74 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e00f      	b.n	8002ea8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	4013      	ands	r3, r2
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d1a3      	bne.n	8002dee <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ec4:	d111      	bne.n	8002eea <SPI_EndRxTransaction+0x3a>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ece:	d004      	beq.n	8002eda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed8:	d107      	bne.n	8002eea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ee8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ef2:	d12a      	bne.n	8002f4a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efc:	d012      	beq.n	8002f24 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2200      	movs	r2, #0
 8002f06:	2180      	movs	r1, #128	; 0x80
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f7ff ff67 	bl	8002ddc <SPI_WaitFlagStateUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d02d      	beq.n	8002f70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	f043 0220 	orr.w	r2, r3, #32
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e026      	b.n	8002f72 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f7ff ff54 	bl	8002ddc <SPI_WaitFlagStateUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d01a      	beq.n	8002f70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3e:	f043 0220 	orr.w	r2, r3, #32
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e013      	b.n	8002f72 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2200      	movs	r2, #0
 8002f52:	2101      	movs	r1, #1
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f7ff ff41 	bl	8002ddc <SPI_WaitFlagStateUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d007      	beq.n	8002f70 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f64:	f043 0220 	orr.w	r2, r3, #32
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e000      	b.n	8002f72 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f88:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <SPI_EndRxTxTransaction+0x7c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1b      	ldr	r2, [pc, #108]	; (8002ffc <SPI_EndRxTxTransaction+0x80>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	0d5b      	lsrs	r3, r3, #21
 8002f94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f98:	fb02 f303 	mul.w	r3, r2, r3
 8002f9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fa6:	d112      	bne.n	8002fce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2180      	movs	r1, #128	; 0x80
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f7ff ff12 	bl	8002ddc <SPI_WaitFlagStateUntilTimeout>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d016      	beq.n	8002fec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc2:	f043 0220 	orr.w	r2, r3, #32
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e00f      	b.n	8002fee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe4:	2b80      	cmp	r3, #128	; 0x80
 8002fe6:	d0f2      	beq.n	8002fce <SPI_EndRxTxTransaction+0x52>
 8002fe8:	e000      	b.n	8002fec <SPI_EndRxTxTransaction+0x70>
        break;
 8002fea:	bf00      	nop
  }

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000004 	.word	0x20000004
 8002ffc:	165e9f81 	.word	0x165e9f81

08003000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e083      	b.n	800311a <HAL_TIM_Base_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a43      	ldr	r2, [pc, #268]	; (8003124 <HAL_TIM_Base_Init+0x124>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d027      	beq.n	800306c <HAL_TIM_Base_Init+0x6c>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003024:	d022      	beq.n	800306c <HAL_TIM_Base_Init+0x6c>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a3f      	ldr	r2, [pc, #252]	; (8003128 <HAL_TIM_Base_Init+0x128>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d01d      	beq.n	800306c <HAL_TIM_Base_Init+0x6c>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a3d      	ldr	r2, [pc, #244]	; (800312c <HAL_TIM_Base_Init+0x12c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d018      	beq.n	800306c <HAL_TIM_Base_Init+0x6c>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a3c      	ldr	r2, [pc, #240]	; (8003130 <HAL_TIM_Base_Init+0x130>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d013      	beq.n	800306c <HAL_TIM_Base_Init+0x6c>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a3a      	ldr	r2, [pc, #232]	; (8003134 <HAL_TIM_Base_Init+0x134>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00e      	beq.n	800306c <HAL_TIM_Base_Init+0x6c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a39      	ldr	r2, [pc, #228]	; (8003138 <HAL_TIM_Base_Init+0x138>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d009      	beq.n	800306c <HAL_TIM_Base_Init+0x6c>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a37      	ldr	r2, [pc, #220]	; (800313c <HAL_TIM_Base_Init+0x13c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d004      	beq.n	800306c <HAL_TIM_Base_Init+0x6c>
 8003062:	f44f 7189 	mov.w	r1, #274	; 0x112
 8003066:	4836      	ldr	r0, [pc, #216]	; (8003140 <HAL_TIM_Base_Init+0x140>)
 8003068:	f7fd fd49 	bl	8000afe <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d014      	beq.n	800309e <HAL_TIM_Base_Init+0x9e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b10      	cmp	r3, #16
 800307a:	d010      	beq.n	800309e <HAL_TIM_Base_Init+0x9e>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b20      	cmp	r3, #32
 8003082:	d00c      	beq.n	800309e <HAL_TIM_Base_Init+0x9e>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b40      	cmp	r3, #64	; 0x40
 800308a:	d008      	beq.n	800309e <HAL_TIM_Base_Init+0x9e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b60      	cmp	r3, #96	; 0x60
 8003092:	d004      	beq.n	800309e <HAL_TIM_Base_Init+0x9e>
 8003094:	f240 1113 	movw	r1, #275	; 0x113
 8003098:	4829      	ldr	r0, [pc, #164]	; (8003140 <HAL_TIM_Base_Init+0x140>)
 800309a:	f7fd fd30 	bl	8000afe <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00e      	beq.n	80030c4 <HAL_TIM_Base_Init+0xc4>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ae:	d009      	beq.n	80030c4 <HAL_TIM_Base_Init+0xc4>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b8:	d004      	beq.n	80030c4 <HAL_TIM_Base_Init+0xc4>
 80030ba:	f44f 718a 	mov.w	r1, #276	; 0x114
 80030be:	4820      	ldr	r0, [pc, #128]	; (8003140 <HAL_TIM_Base_Init+0x140>)
 80030c0:	f7fd fd1d 	bl	8000afe <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_TIM_Base_Init+0xde>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	2b80      	cmp	r3, #128	; 0x80
 80030d2:	d004      	beq.n	80030de <HAL_TIM_Base_Init+0xde>
 80030d4:	f240 1115 	movw	r1, #277	; 0x115
 80030d8:	4819      	ldr	r0, [pc, #100]	; (8003140 <HAL_TIM_Base_Init+0x140>)
 80030da:	f7fd fd10 	bl	8000afe <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fd fe34 	bl	8000d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3304      	adds	r3, #4
 8003108:	4619      	mov	r1, r3
 800310a:	4610      	mov	r0, r2
 800310c:	f000 f94a 	bl	80033a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40010000 	.word	0x40010000
 8003128:	40000400 	.word	0x40000400
 800312c:	40000800 	.word	0x40000800
 8003130:	40000c00 	.word	0x40000c00
 8003134:	40014000 	.word	0x40014000
 8003138:	40014400 	.word	0x40014400
 800313c:	40014800 	.word	0x40014800
 8003140:	08004008 	.word	0x08004008

08003144 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b02      	cmp	r3, #2
 8003158:	d122      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b02      	cmp	r3, #2
 8003166:	d11b      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0202 	mvn.w	r2, #2
 8003170:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f8ee 	bl	8003368 <HAL_TIM_IC_CaptureCallback>
 800318c:	e005      	b.n	800319a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f8e0 	bl	8003354 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f8f1 	bl	800337c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d122      	bne.n	80031f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d11b      	bne.n	80031f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0204 	mvn.w	r2, #4
 80031c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2202      	movs	r2, #2
 80031ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f8c4 	bl	8003368 <HAL_TIM_IC_CaptureCallback>
 80031e0:	e005      	b.n	80031ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f8b6 	bl	8003354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f8c7 	bl	800337c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d122      	bne.n	8003248 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b08      	cmp	r3, #8
 800320e:	d11b      	bne.n	8003248 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0208 	mvn.w	r2, #8
 8003218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2204      	movs	r2, #4
 800321e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f89a 	bl	8003368 <HAL_TIM_IC_CaptureCallback>
 8003234:	e005      	b.n	8003242 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f88c 	bl	8003354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f89d 	bl	800337c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	2b10      	cmp	r3, #16
 8003254:	d122      	bne.n	800329c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b10      	cmp	r3, #16
 8003262:	d11b      	bne.n	800329c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0210 	mvn.w	r2, #16
 800326c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2208      	movs	r2, #8
 8003272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f870 	bl	8003368 <HAL_TIM_IC_CaptureCallback>
 8003288:	e005      	b.n	8003296 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f862 	bl	8003354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f873 	bl	800337c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d10e      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d107      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0201 	mvn.w	r2, #1
 80032c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fd fd04 	bl	8000cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d2:	2b80      	cmp	r3, #128	; 0x80
 80032d4:	d10e      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e0:	2b80      	cmp	r3, #128	; 0x80
 80032e2:	d107      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f8e2 	bl	80034b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fe:	2b40      	cmp	r3, #64	; 0x40
 8003300:	d10e      	bne.n	8003320 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330c:	2b40      	cmp	r3, #64	; 0x40
 800330e:	d107      	bne.n	8003320 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f838 	bl	8003390 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b20      	cmp	r3, #32
 800332c:	d10e      	bne.n	800334c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0320 	and.w	r3, r3, #32
 8003338:	2b20      	cmp	r3, #32
 800333a:	d107      	bne.n	800334c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0220 	mvn.w	r2, #32
 8003344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8ac 	bl	80034a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a34      	ldr	r2, [pc, #208]	; (8003488 <TIM_Base_SetConfig+0xe4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00f      	beq.n	80033dc <TIM_Base_SetConfig+0x38>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c2:	d00b      	beq.n	80033dc <TIM_Base_SetConfig+0x38>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a31      	ldr	r2, [pc, #196]	; (800348c <TIM_Base_SetConfig+0xe8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d007      	beq.n	80033dc <TIM_Base_SetConfig+0x38>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a30      	ldr	r2, [pc, #192]	; (8003490 <TIM_Base_SetConfig+0xec>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d003      	beq.n	80033dc <TIM_Base_SetConfig+0x38>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a2f      	ldr	r2, [pc, #188]	; (8003494 <TIM_Base_SetConfig+0xf0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d108      	bne.n	80033ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a25      	ldr	r2, [pc, #148]	; (8003488 <TIM_Base_SetConfig+0xe4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01b      	beq.n	800342e <TIM_Base_SetConfig+0x8a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fc:	d017      	beq.n	800342e <TIM_Base_SetConfig+0x8a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a22      	ldr	r2, [pc, #136]	; (800348c <TIM_Base_SetConfig+0xe8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d013      	beq.n	800342e <TIM_Base_SetConfig+0x8a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a21      	ldr	r2, [pc, #132]	; (8003490 <TIM_Base_SetConfig+0xec>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00f      	beq.n	800342e <TIM_Base_SetConfig+0x8a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a20      	ldr	r2, [pc, #128]	; (8003494 <TIM_Base_SetConfig+0xf0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00b      	beq.n	800342e <TIM_Base_SetConfig+0x8a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1f      	ldr	r2, [pc, #124]	; (8003498 <TIM_Base_SetConfig+0xf4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d007      	beq.n	800342e <TIM_Base_SetConfig+0x8a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1e      	ldr	r2, [pc, #120]	; (800349c <TIM_Base_SetConfig+0xf8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d003      	beq.n	800342e <TIM_Base_SetConfig+0x8a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a1d      	ldr	r2, [pc, #116]	; (80034a0 <TIM_Base_SetConfig+0xfc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d108      	bne.n	8003440 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a08      	ldr	r2, [pc, #32]	; (8003488 <TIM_Base_SetConfig+0xe4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d103      	bne.n	8003474 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	615a      	str	r2, [r3, #20]
}
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40010000 	.word	0x40010000
 800348c:	40000400 	.word	0x40000400
 8003490:	40000800 	.word	0x40000800
 8003494:	40000c00 	.word	0x40000c00
 8003498:	40014000 	.word	0x40014000
 800349c:	40014400 	.word	0x40014400
 80034a0:	40014800 	.word	0x40014800

080034a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e0a0      	b.n	8003620 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d02c      	beq.n	8003540 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a4f      	ldr	r2, [pc, #316]	; (8003628 <HAL_UART_Init+0x15c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00e      	beq.n	800350e <HAL_UART_Init+0x42>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a4d      	ldr	r2, [pc, #308]	; (800362c <HAL_UART_Init+0x160>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d009      	beq.n	800350e <HAL_UART_Init+0x42>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a4c      	ldr	r2, [pc, #304]	; (8003630 <HAL_UART_Init+0x164>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d004      	beq.n	800350e <HAL_UART_Init+0x42>
 8003504:	f240 114b 	movw	r1, #331	; 0x14b
 8003508:	484a      	ldr	r0, [pc, #296]	; (8003634 <HAL_UART_Init+0x168>)
 800350a:	f7fd faf8 	bl	8000afe <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d028      	beq.n	8003568 <HAL_UART_Init+0x9c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351e:	d023      	beq.n	8003568 <HAL_UART_Init+0x9c>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003528:	d01e      	beq.n	8003568 <HAL_UART_Init+0x9c>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003532:	d019      	beq.n	8003568 <HAL_UART_Init+0x9c>
 8003534:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8003538:	483e      	ldr	r0, [pc, #248]	; (8003634 <HAL_UART_Init+0x168>)
 800353a:	f7fd fae0 	bl	8000afe <assert_failed>
 800353e:	e013      	b.n	8003568 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a38      	ldr	r2, [pc, #224]	; (8003628 <HAL_UART_Init+0x15c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00e      	beq.n	8003568 <HAL_UART_Init+0x9c>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a37      	ldr	r2, [pc, #220]	; (800362c <HAL_UART_Init+0x160>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d009      	beq.n	8003568 <HAL_UART_Init+0x9c>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a35      	ldr	r2, [pc, #212]	; (8003630 <HAL_UART_Init+0x164>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d004      	beq.n	8003568 <HAL_UART_Init+0x9c>
 800355e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8003562:	4834      	ldr	r0, [pc, #208]	; (8003634 <HAL_UART_Init+0x168>)
 8003564:	f7fd facb 	bl	8000afe <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d009      	beq.n	8003584 <HAL_UART_Init+0xb8>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003578:	d004      	beq.n	8003584 <HAL_UART_Init+0xb8>
 800357a:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800357e:	482d      	ldr	r0, [pc, #180]	; (8003634 <HAL_UART_Init+0x168>)
 8003580:	f7fd fabd 	bl	8000afe <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d009      	beq.n	80035a0 <HAL_UART_Init+0xd4>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003594:	d004      	beq.n	80035a0 <HAL_UART_Init+0xd4>
 8003596:	f240 1153 	movw	r1, #339	; 0x153
 800359a:	4826      	ldr	r0, [pc, #152]	; (8003634 <HAL_UART_Init+0x168>)
 800359c:	f7fd faaf 	bl	8000afe <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d106      	bne.n	80035ba <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7fd fc25 	bl	8000e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2224      	movs	r2, #36	; 0x24
 80035be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f830 	bl	8003638 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691a      	ldr	r2, [r3, #16]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003606:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40011000 	.word	0x40011000
 800362c:	40004400 	.word	0x40004400
 8003630:	40011400 	.word	0x40011400
 8003634:	08004040 	.word	0x08004040

08003638 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800363c:	b085      	sub	sp, #20
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4a9a      	ldr	r2, [pc, #616]	; (80038b0 <UART_SetConfig+0x278>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d904      	bls.n	8003656 <UART_SetConfig+0x1e>
 800364c:	f640 31fb 	movw	r1, #3067	; 0xbfb
 8003650:	4898      	ldr	r0, [pc, #608]	; (80038b4 <UART_SetConfig+0x27c>)
 8003652:	f7fd fa54 	bl	8000afe <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <UART_SetConfig+0x3a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003666:	d004      	beq.n	8003672 <UART_SetConfig+0x3a>
 8003668:	f640 31fc 	movw	r1, #3068	; 0xbfc
 800366c:	4891      	ldr	r0, [pc, #580]	; (80038b4 <UART_SetConfig+0x27c>)
 800366e:	f7fd fa46 	bl	8000afe <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00e      	beq.n	8003698 <UART_SetConfig+0x60>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003682:	d009      	beq.n	8003698 <UART_SetConfig+0x60>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800368c:	d004      	beq.n	8003698 <UART_SetConfig+0x60>
 800368e:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8003692:	4888      	ldr	r0, [pc, #544]	; (80038b4 <UART_SetConfig+0x27c>)
 8003694:	f7fd fa33 	bl	8000afe <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	695a      	ldr	r2, [r3, #20]
 800369c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d103      	bne.n	80036ae <UART_SetConfig+0x76>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d104      	bne.n	80036b8 <UART_SetConfig+0x80>
 80036ae:	f640 31fe 	movw	r1, #3070	; 0xbfe
 80036b2:	4880      	ldr	r0, [pc, #512]	; (80038b4 <UART_SetConfig+0x27c>)
 80036b4:	f7fd fa23 	bl	8000afe <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80036f0:	f023 030c 	bic.w	r3, r3, #12
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	68f9      	ldr	r1, [r7, #12]
 80036fa:	430b      	orrs	r3, r1
 80036fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699a      	ldr	r2, [r3, #24]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371c:	f040 818f 	bne.w	8003a3e <UART_SetConfig+0x406>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a64      	ldr	r2, [pc, #400]	; (80038b8 <UART_SetConfig+0x280>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d005      	beq.n	8003736 <UART_SetConfig+0xfe>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a63      	ldr	r2, [pc, #396]	; (80038bc <UART_SetConfig+0x284>)
 8003730:	4293      	cmp	r3, r2
 8003732:	f040 80c7 	bne.w	80038c4 <UART_SetConfig+0x28c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003736:	f7fe fe1b 	bl	8002370 <HAL_RCC_GetPCLK2Freq>
 800373a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	461d      	mov	r5, r3
 8003740:	f04f 0600 	mov.w	r6, #0
 8003744:	46a8      	mov	r8, r5
 8003746:	46b1      	mov	r9, r6
 8003748:	eb18 0308 	adds.w	r3, r8, r8
 800374c:	eb49 0409 	adc.w	r4, r9, r9
 8003750:	4698      	mov	r8, r3
 8003752:	46a1      	mov	r9, r4
 8003754:	eb18 0805 	adds.w	r8, r8, r5
 8003758:	eb49 0906 	adc.w	r9, r9, r6
 800375c:	f04f 0100 	mov.w	r1, #0
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003768:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800376c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003770:	4688      	mov	r8, r1
 8003772:	4691      	mov	r9, r2
 8003774:	eb18 0005 	adds.w	r0, r8, r5
 8003778:	eb49 0106 	adc.w	r1, r9, r6
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	461d      	mov	r5, r3
 8003782:	f04f 0600 	mov.w	r6, #0
 8003786:	196b      	adds	r3, r5, r5
 8003788:	eb46 0406 	adc.w	r4, r6, r6
 800378c:	461a      	mov	r2, r3
 800378e:	4623      	mov	r3, r4
 8003790:	f7fc fd20 	bl	80001d4 <__aeabi_uldivmod>
 8003794:	4603      	mov	r3, r0
 8003796:	460c      	mov	r4, r1
 8003798:	461a      	mov	r2, r3
 800379a:	4b49      	ldr	r3, [pc, #292]	; (80038c0 <UART_SetConfig+0x288>)
 800379c:	fba3 2302 	umull	r2, r3, r3, r2
 80037a0:	095b      	lsrs	r3, r3, #5
 80037a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	461d      	mov	r5, r3
 80037aa:	f04f 0600 	mov.w	r6, #0
 80037ae:	46a9      	mov	r9, r5
 80037b0:	46b2      	mov	sl, r6
 80037b2:	eb19 0309 	adds.w	r3, r9, r9
 80037b6:	eb4a 040a 	adc.w	r4, sl, sl
 80037ba:	4699      	mov	r9, r3
 80037bc:	46a2      	mov	sl, r4
 80037be:	eb19 0905 	adds.w	r9, r9, r5
 80037c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80037c6:	f04f 0100 	mov.w	r1, #0
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037da:	4689      	mov	r9, r1
 80037dc:	4692      	mov	sl, r2
 80037de:	eb19 0005 	adds.w	r0, r9, r5
 80037e2:	eb4a 0106 	adc.w	r1, sl, r6
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	461d      	mov	r5, r3
 80037ec:	f04f 0600 	mov.w	r6, #0
 80037f0:	196b      	adds	r3, r5, r5
 80037f2:	eb46 0406 	adc.w	r4, r6, r6
 80037f6:	461a      	mov	r2, r3
 80037f8:	4623      	mov	r3, r4
 80037fa:	f7fc fceb 	bl	80001d4 <__aeabi_uldivmod>
 80037fe:	4603      	mov	r3, r0
 8003800:	460c      	mov	r4, r1
 8003802:	461a      	mov	r2, r3
 8003804:	4b2e      	ldr	r3, [pc, #184]	; (80038c0 <UART_SetConfig+0x288>)
 8003806:	fba3 1302 	umull	r1, r3, r3, r2
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	2164      	movs	r1, #100	; 0x64
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	3332      	adds	r3, #50	; 0x32
 8003818:	4a29      	ldr	r2, [pc, #164]	; (80038c0 <UART_SetConfig+0x288>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003826:	4498      	add	r8, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	461d      	mov	r5, r3
 800382c:	f04f 0600 	mov.w	r6, #0
 8003830:	46a9      	mov	r9, r5
 8003832:	46b2      	mov	sl, r6
 8003834:	eb19 0309 	adds.w	r3, r9, r9
 8003838:	eb4a 040a 	adc.w	r4, sl, sl
 800383c:	4699      	mov	r9, r3
 800383e:	46a2      	mov	sl, r4
 8003840:	eb19 0905 	adds.w	r9, r9, r5
 8003844:	eb4a 0a06 	adc.w	sl, sl, r6
 8003848:	f04f 0100 	mov.w	r1, #0
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003854:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003858:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800385c:	4689      	mov	r9, r1
 800385e:	4692      	mov	sl, r2
 8003860:	eb19 0005 	adds.w	r0, r9, r5
 8003864:	eb4a 0106 	adc.w	r1, sl, r6
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	461d      	mov	r5, r3
 800386e:	f04f 0600 	mov.w	r6, #0
 8003872:	196b      	adds	r3, r5, r5
 8003874:	eb46 0406 	adc.w	r4, r6, r6
 8003878:	461a      	mov	r2, r3
 800387a:	4623      	mov	r3, r4
 800387c:	f7fc fcaa 	bl	80001d4 <__aeabi_uldivmod>
 8003880:	4603      	mov	r3, r0
 8003882:	460c      	mov	r4, r1
 8003884:	461a      	mov	r2, r3
 8003886:	4b0e      	ldr	r3, [pc, #56]	; (80038c0 <UART_SetConfig+0x288>)
 8003888:	fba3 1302 	umull	r1, r3, r3, r2
 800388c:	095b      	lsrs	r3, r3, #5
 800388e:	2164      	movs	r1, #100	; 0x64
 8003890:	fb01 f303 	mul.w	r3, r1, r3
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	3332      	adds	r3, #50	; 0x32
 800389a:	4a09      	ldr	r2, [pc, #36]	; (80038c0 <UART_SetConfig+0x288>)
 800389c:	fba2 2303 	umull	r2, r3, r2, r3
 80038a0:	095b      	lsrs	r3, r3, #5
 80038a2:	f003 0207 	and.w	r2, r3, #7
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4442      	add	r2, r8
 80038ac:	609a      	str	r2, [r3, #8]
 80038ae:	e27a      	b.n	8003da6 <UART_SetConfig+0x76e>
 80038b0:	00a037a0 	.word	0x00a037a0
 80038b4:	08004040 	.word	0x08004040
 80038b8:	40011000 	.word	0x40011000
 80038bc:	40011400 	.word	0x40011400
 80038c0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038c4:	f7fe fd40 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 80038c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	461d      	mov	r5, r3
 80038ce:	f04f 0600 	mov.w	r6, #0
 80038d2:	46a8      	mov	r8, r5
 80038d4:	46b1      	mov	r9, r6
 80038d6:	eb18 0308 	adds.w	r3, r8, r8
 80038da:	eb49 0409 	adc.w	r4, r9, r9
 80038de:	4698      	mov	r8, r3
 80038e0:	46a1      	mov	r9, r4
 80038e2:	eb18 0805 	adds.w	r8, r8, r5
 80038e6:	eb49 0906 	adc.w	r9, r9, r6
 80038ea:	f04f 0100 	mov.w	r1, #0
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80038f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80038fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80038fe:	4688      	mov	r8, r1
 8003900:	4691      	mov	r9, r2
 8003902:	eb18 0005 	adds.w	r0, r8, r5
 8003906:	eb49 0106 	adc.w	r1, r9, r6
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	461d      	mov	r5, r3
 8003910:	f04f 0600 	mov.w	r6, #0
 8003914:	196b      	adds	r3, r5, r5
 8003916:	eb46 0406 	adc.w	r4, r6, r6
 800391a:	461a      	mov	r2, r3
 800391c:	4623      	mov	r3, r4
 800391e:	f7fc fc59 	bl	80001d4 <__aeabi_uldivmod>
 8003922:	4603      	mov	r3, r0
 8003924:	460c      	mov	r4, r1
 8003926:	461a      	mov	r2, r3
 8003928:	4bb3      	ldr	r3, [pc, #716]	; (8003bf8 <UART_SetConfig+0x5c0>)
 800392a:	fba3 2302 	umull	r2, r3, r3, r2
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	461d      	mov	r5, r3
 8003938:	f04f 0600 	mov.w	r6, #0
 800393c:	46a9      	mov	r9, r5
 800393e:	46b2      	mov	sl, r6
 8003940:	eb19 0309 	adds.w	r3, r9, r9
 8003944:	eb4a 040a 	adc.w	r4, sl, sl
 8003948:	4699      	mov	r9, r3
 800394a:	46a2      	mov	sl, r4
 800394c:	eb19 0905 	adds.w	r9, r9, r5
 8003950:	eb4a 0a06 	adc.w	sl, sl, r6
 8003954:	f04f 0100 	mov.w	r1, #0
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003960:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003964:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003968:	4689      	mov	r9, r1
 800396a:	4692      	mov	sl, r2
 800396c:	eb19 0005 	adds.w	r0, r9, r5
 8003970:	eb4a 0106 	adc.w	r1, sl, r6
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	461d      	mov	r5, r3
 800397a:	f04f 0600 	mov.w	r6, #0
 800397e:	196b      	adds	r3, r5, r5
 8003980:	eb46 0406 	adc.w	r4, r6, r6
 8003984:	461a      	mov	r2, r3
 8003986:	4623      	mov	r3, r4
 8003988:	f7fc fc24 	bl	80001d4 <__aeabi_uldivmod>
 800398c:	4603      	mov	r3, r0
 800398e:	460c      	mov	r4, r1
 8003990:	461a      	mov	r2, r3
 8003992:	4b99      	ldr	r3, [pc, #612]	; (8003bf8 <UART_SetConfig+0x5c0>)
 8003994:	fba3 1302 	umull	r1, r3, r3, r2
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	2164      	movs	r1, #100	; 0x64
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	3332      	adds	r3, #50	; 0x32
 80039a6:	4a94      	ldr	r2, [pc, #592]	; (8003bf8 <UART_SetConfig+0x5c0>)
 80039a8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ac:	095b      	lsrs	r3, r3, #5
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039b4:	4498      	add	r8, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	461d      	mov	r5, r3
 80039ba:	f04f 0600 	mov.w	r6, #0
 80039be:	46a9      	mov	r9, r5
 80039c0:	46b2      	mov	sl, r6
 80039c2:	eb19 0309 	adds.w	r3, r9, r9
 80039c6:	eb4a 040a 	adc.w	r4, sl, sl
 80039ca:	4699      	mov	r9, r3
 80039cc:	46a2      	mov	sl, r4
 80039ce:	eb19 0905 	adds.w	r9, r9, r5
 80039d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80039d6:	f04f 0100 	mov.w	r1, #0
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039ea:	4689      	mov	r9, r1
 80039ec:	4692      	mov	sl, r2
 80039ee:	eb19 0005 	adds.w	r0, r9, r5
 80039f2:	eb4a 0106 	adc.w	r1, sl, r6
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	461d      	mov	r5, r3
 80039fc:	f04f 0600 	mov.w	r6, #0
 8003a00:	196b      	adds	r3, r5, r5
 8003a02:	eb46 0406 	adc.w	r4, r6, r6
 8003a06:	461a      	mov	r2, r3
 8003a08:	4623      	mov	r3, r4
 8003a0a:	f7fc fbe3 	bl	80001d4 <__aeabi_uldivmod>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	460c      	mov	r4, r1
 8003a12:	461a      	mov	r2, r3
 8003a14:	4b78      	ldr	r3, [pc, #480]	; (8003bf8 <UART_SetConfig+0x5c0>)
 8003a16:	fba3 1302 	umull	r1, r3, r3, r2
 8003a1a:	095b      	lsrs	r3, r3, #5
 8003a1c:	2164      	movs	r1, #100	; 0x64
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	3332      	adds	r3, #50	; 0x32
 8003a28:	4a73      	ldr	r2, [pc, #460]	; (8003bf8 <UART_SetConfig+0x5c0>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	f003 0207 	and.w	r2, r3, #7
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4442      	add	r2, r8
 8003a3a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003a3c:	e1b3      	b.n	8003da6 <UART_SetConfig+0x76e>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a6e      	ldr	r2, [pc, #440]	; (8003bfc <UART_SetConfig+0x5c4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d005      	beq.n	8003a54 <UART_SetConfig+0x41c>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a6c      	ldr	r2, [pc, #432]	; (8003c00 <UART_SetConfig+0x5c8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	f040 80d8 	bne.w	8003c04 <UART_SetConfig+0x5cc>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a54:	f7fe fc8c 	bl	8002370 <HAL_RCC_GetPCLK2Freq>
 8003a58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	469a      	mov	sl, r3
 8003a5e:	f04f 0b00 	mov.w	fp, #0
 8003a62:	46d0      	mov	r8, sl
 8003a64:	46d9      	mov	r9, fp
 8003a66:	eb18 0308 	adds.w	r3, r8, r8
 8003a6a:	eb49 0409 	adc.w	r4, r9, r9
 8003a6e:	4698      	mov	r8, r3
 8003a70:	46a1      	mov	r9, r4
 8003a72:	eb18 080a 	adds.w	r8, r8, sl
 8003a76:	eb49 090b 	adc.w	r9, r9, fp
 8003a7a:	f04f 0100 	mov.w	r1, #0
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a8e:	4688      	mov	r8, r1
 8003a90:	4691      	mov	r9, r2
 8003a92:	eb1a 0508 	adds.w	r5, sl, r8
 8003a96:	eb4b 0609 	adc.w	r6, fp, r9
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	f04f 0400 	mov.w	r4, #0
 8003aac:	0094      	lsls	r4, r2, #2
 8003aae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ab2:	008b      	lsls	r3, r1, #2
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4623      	mov	r3, r4
 8003ab8:	4628      	mov	r0, r5
 8003aba:	4631      	mov	r1, r6
 8003abc:	f7fc fb8a 	bl	80001d4 <__aeabi_uldivmod>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	460c      	mov	r4, r1
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4b4c      	ldr	r3, [pc, #304]	; (8003bf8 <UART_SetConfig+0x5c0>)
 8003ac8:	fba3 2302 	umull	r2, r3, r3, r2
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	469b      	mov	fp, r3
 8003ad6:	f04f 0c00 	mov.w	ip, #0
 8003ada:	46d9      	mov	r9, fp
 8003adc:	46e2      	mov	sl, ip
 8003ade:	eb19 0309 	adds.w	r3, r9, r9
 8003ae2:	eb4a 040a 	adc.w	r4, sl, sl
 8003ae6:	4699      	mov	r9, r3
 8003ae8:	46a2      	mov	sl, r4
 8003aea:	eb19 090b 	adds.w	r9, r9, fp
 8003aee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003af2:	f04f 0100 	mov.w	r1, #0
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003afe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b06:	4689      	mov	r9, r1
 8003b08:	4692      	mov	sl, r2
 8003b0a:	eb1b 0509 	adds.w	r5, fp, r9
 8003b0e:	eb4c 060a 	adc.w	r6, ip, sl
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	4619      	mov	r1, r3
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	f04f 0400 	mov.w	r4, #0
 8003b24:	0094      	lsls	r4, r2, #2
 8003b26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b2a:	008b      	lsls	r3, r1, #2
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4623      	mov	r3, r4
 8003b30:	4628      	mov	r0, r5
 8003b32:	4631      	mov	r1, r6
 8003b34:	f7fc fb4e 	bl	80001d4 <__aeabi_uldivmod>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	460c      	mov	r4, r1
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4b2e      	ldr	r3, [pc, #184]	; (8003bf8 <UART_SetConfig+0x5c0>)
 8003b40:	fba3 1302 	umull	r1, r3, r3, r2
 8003b44:	095b      	lsrs	r3, r3, #5
 8003b46:	2164      	movs	r1, #100	; 0x64
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	3332      	adds	r3, #50	; 0x32
 8003b52:	4a29      	ldr	r2, [pc, #164]	; (8003bf8 <UART_SetConfig+0x5c0>)
 8003b54:	fba2 2303 	umull	r2, r3, r2, r3
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b5e:	4498      	add	r8, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	469b      	mov	fp, r3
 8003b64:	f04f 0c00 	mov.w	ip, #0
 8003b68:	46d9      	mov	r9, fp
 8003b6a:	46e2      	mov	sl, ip
 8003b6c:	eb19 0309 	adds.w	r3, r9, r9
 8003b70:	eb4a 040a 	adc.w	r4, sl, sl
 8003b74:	4699      	mov	r9, r3
 8003b76:	46a2      	mov	sl, r4
 8003b78:	eb19 090b 	adds.w	r9, r9, fp
 8003b7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b80:	f04f 0100 	mov.w	r1, #0
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b94:	4689      	mov	r9, r1
 8003b96:	4692      	mov	sl, r2
 8003b98:	eb1b 0509 	adds.w	r5, fp, r9
 8003b9c:	eb4c 060a 	adc.w	r6, ip, sl
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	f04f 0400 	mov.w	r4, #0
 8003bb2:	0094      	lsls	r4, r2, #2
 8003bb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bb8:	008b      	lsls	r3, r1, #2
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4623      	mov	r3, r4
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	4631      	mov	r1, r6
 8003bc2:	f7fc fb07 	bl	80001d4 <__aeabi_uldivmod>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	460c      	mov	r4, r1
 8003bca:	461a      	mov	r2, r3
 8003bcc:	4b0a      	ldr	r3, [pc, #40]	; (8003bf8 <UART_SetConfig+0x5c0>)
 8003bce:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	2164      	movs	r1, #100	; 0x64
 8003bd6:	fb01 f303 	mul.w	r3, r1, r3
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	3332      	adds	r3, #50	; 0x32
 8003be0:	4a05      	ldr	r2, [pc, #20]	; (8003bf8 <UART_SetConfig+0x5c0>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	f003 020f 	and.w	r2, r3, #15
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4442      	add	r2, r8
 8003bf2:	609a      	str	r2, [r3, #8]
 8003bf4:	e0d7      	b.n	8003da6 <UART_SetConfig+0x76e>
 8003bf6:	bf00      	nop
 8003bf8:	51eb851f 	.word	0x51eb851f
 8003bfc:	40011000 	.word	0x40011000
 8003c00:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c04:	f7fe fba0 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 8003c08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	469a      	mov	sl, r3
 8003c0e:	f04f 0b00 	mov.w	fp, #0
 8003c12:	46d0      	mov	r8, sl
 8003c14:	46d9      	mov	r9, fp
 8003c16:	eb18 0308 	adds.w	r3, r8, r8
 8003c1a:	eb49 0409 	adc.w	r4, r9, r9
 8003c1e:	4698      	mov	r8, r3
 8003c20:	46a1      	mov	r9, r4
 8003c22:	eb18 080a 	adds.w	r8, r8, sl
 8003c26:	eb49 090b 	adc.w	r9, r9, fp
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c3e:	4688      	mov	r8, r1
 8003c40:	4691      	mov	r9, r2
 8003c42:	eb1a 0508 	adds.w	r5, sl, r8
 8003c46:	eb4b 0609 	adc.w	r6, fp, r9
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	f04f 0400 	mov.w	r4, #0
 8003c5c:	0094      	lsls	r4, r2, #2
 8003c5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c62:	008b      	lsls	r3, r1, #2
 8003c64:	461a      	mov	r2, r3
 8003c66:	4623      	mov	r3, r4
 8003c68:	4628      	mov	r0, r5
 8003c6a:	4631      	mov	r1, r6
 8003c6c:	f7fc fab2 	bl	80001d4 <__aeabi_uldivmod>
 8003c70:	4603      	mov	r3, r0
 8003c72:	460c      	mov	r4, r1
 8003c74:	461a      	mov	r2, r3
 8003c76:	4b4e      	ldr	r3, [pc, #312]	; (8003db0 <UART_SetConfig+0x778>)
 8003c78:	fba3 2302 	umull	r2, r3, r3, r2
 8003c7c:	095b      	lsrs	r3, r3, #5
 8003c7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	469b      	mov	fp, r3
 8003c86:	f04f 0c00 	mov.w	ip, #0
 8003c8a:	46d9      	mov	r9, fp
 8003c8c:	46e2      	mov	sl, ip
 8003c8e:	eb19 0309 	adds.w	r3, r9, r9
 8003c92:	eb4a 040a 	adc.w	r4, sl, sl
 8003c96:	4699      	mov	r9, r3
 8003c98:	46a2      	mov	sl, r4
 8003c9a:	eb19 090b 	adds.w	r9, r9, fp
 8003c9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ca2:	f04f 0100 	mov.w	r1, #0
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cb6:	4689      	mov	r9, r1
 8003cb8:	4692      	mov	sl, r2
 8003cba:	eb1b 0509 	adds.w	r5, fp, r9
 8003cbe:	eb4c 060a 	adc.w	r6, ip, sl
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	f04f 0400 	mov.w	r4, #0
 8003cd4:	0094      	lsls	r4, r2, #2
 8003cd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cda:	008b      	lsls	r3, r1, #2
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4623      	mov	r3, r4
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	4631      	mov	r1, r6
 8003ce4:	f7fc fa76 	bl	80001d4 <__aeabi_uldivmod>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	460c      	mov	r4, r1
 8003cec:	461a      	mov	r2, r3
 8003cee:	4b30      	ldr	r3, [pc, #192]	; (8003db0 <UART_SetConfig+0x778>)
 8003cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf4:	095b      	lsrs	r3, r3, #5
 8003cf6:	2164      	movs	r1, #100	; 0x64
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	3332      	adds	r3, #50	; 0x32
 8003d02:	4a2b      	ldr	r2, [pc, #172]	; (8003db0 <UART_SetConfig+0x778>)
 8003d04:	fba2 2303 	umull	r2, r3, r2, r3
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d0e:	4498      	add	r8, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	469b      	mov	fp, r3
 8003d14:	f04f 0c00 	mov.w	ip, #0
 8003d18:	46d9      	mov	r9, fp
 8003d1a:	46e2      	mov	sl, ip
 8003d1c:	eb19 0309 	adds.w	r3, r9, r9
 8003d20:	eb4a 040a 	adc.w	r4, sl, sl
 8003d24:	4699      	mov	r9, r3
 8003d26:	46a2      	mov	sl, r4
 8003d28:	eb19 090b 	adds.w	r9, r9, fp
 8003d2c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d30:	f04f 0100 	mov.w	r1, #0
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d44:	4689      	mov	r9, r1
 8003d46:	4692      	mov	sl, r2
 8003d48:	eb1b 0509 	adds.w	r5, fp, r9
 8003d4c:	eb4c 060a 	adc.w	r6, ip, sl
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	4619      	mov	r1, r3
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	f04f 0300 	mov.w	r3, #0
 8003d5e:	f04f 0400 	mov.w	r4, #0
 8003d62:	0094      	lsls	r4, r2, #2
 8003d64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d68:	008b      	lsls	r3, r1, #2
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4623      	mov	r3, r4
 8003d6e:	4628      	mov	r0, r5
 8003d70:	4631      	mov	r1, r6
 8003d72:	f7fc fa2f 	bl	80001d4 <__aeabi_uldivmod>
 8003d76:	4603      	mov	r3, r0
 8003d78:	460c      	mov	r4, r1
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <UART_SetConfig+0x778>)
 8003d7e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	2164      	movs	r1, #100	; 0x64
 8003d86:	fb01 f303 	mul.w	r3, r1, r3
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	3332      	adds	r3, #50	; 0x32
 8003d90:	4a07      	ldr	r2, [pc, #28]	; (8003db0 <UART_SetConfig+0x778>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	f003 020f 	and.w	r2, r3, #15
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4442      	add	r2, r8
 8003da2:	609a      	str	r2, [r3, #8]
}
 8003da4:	e7ff      	b.n	8003da6 <UART_SetConfig+0x76e>
 8003da6:	bf00      	nop
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003db0:	51eb851f 	.word	0x51eb851f

08003db4 <__libc_init_array>:
 8003db4:	b570      	push	{r4, r5, r6, lr}
 8003db6:	4e0d      	ldr	r6, [pc, #52]	; (8003dec <__libc_init_array+0x38>)
 8003db8:	4c0d      	ldr	r4, [pc, #52]	; (8003df0 <__libc_init_array+0x3c>)
 8003dba:	1ba4      	subs	r4, r4, r6
 8003dbc:	10a4      	asrs	r4, r4, #2
 8003dbe:	2500      	movs	r5, #0
 8003dc0:	42a5      	cmp	r5, r4
 8003dc2:	d109      	bne.n	8003dd8 <__libc_init_array+0x24>
 8003dc4:	4e0b      	ldr	r6, [pc, #44]	; (8003df4 <__libc_init_array+0x40>)
 8003dc6:	4c0c      	ldr	r4, [pc, #48]	; (8003df8 <__libc_init_array+0x44>)
 8003dc8:	f000 f878 	bl	8003ebc <_init>
 8003dcc:	1ba4      	subs	r4, r4, r6
 8003dce:	10a4      	asrs	r4, r4, #2
 8003dd0:	2500      	movs	r5, #0
 8003dd2:	42a5      	cmp	r5, r4
 8003dd4:	d105      	bne.n	8003de2 <__libc_init_array+0x2e>
 8003dd6:	bd70      	pop	{r4, r5, r6, pc}
 8003dd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ddc:	4798      	blx	r3
 8003dde:	3501      	adds	r5, #1
 8003de0:	e7ee      	b.n	8003dc0 <__libc_init_array+0xc>
 8003de2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003de6:	4798      	blx	r3
 8003de8:	3501      	adds	r5, #1
 8003dea:	e7f2      	b.n	8003dd2 <__libc_init_array+0x1e>
 8003dec:	080040c4 	.word	0x080040c4
 8003df0:	080040c4 	.word	0x080040c4
 8003df4:	080040c4 	.word	0x080040c4
 8003df8:	080040c8 	.word	0x080040c8

08003dfc <__itoa>:
 8003dfc:	1e93      	subs	r3, r2, #2
 8003dfe:	2b22      	cmp	r3, #34	; 0x22
 8003e00:	b510      	push	{r4, lr}
 8003e02:	460c      	mov	r4, r1
 8003e04:	d904      	bls.n	8003e10 <__itoa+0x14>
 8003e06:	2300      	movs	r3, #0
 8003e08:	700b      	strb	r3, [r1, #0]
 8003e0a:	461c      	mov	r4, r3
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	bd10      	pop	{r4, pc}
 8003e10:	2a0a      	cmp	r2, #10
 8003e12:	d109      	bne.n	8003e28 <__itoa+0x2c>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	da07      	bge.n	8003e28 <__itoa+0x2c>
 8003e18:	232d      	movs	r3, #45	; 0x2d
 8003e1a:	700b      	strb	r3, [r1, #0]
 8003e1c:	4240      	negs	r0, r0
 8003e1e:	2101      	movs	r1, #1
 8003e20:	4421      	add	r1, r4
 8003e22:	f000 f80d 	bl	8003e40 <__utoa>
 8003e26:	e7f1      	b.n	8003e0c <__itoa+0x10>
 8003e28:	2100      	movs	r1, #0
 8003e2a:	e7f9      	b.n	8003e20 <__itoa+0x24>

08003e2c <itoa>:
 8003e2c:	f7ff bfe6 	b.w	8003dfc <__itoa>

08003e30 <memset>:
 8003e30:	4402      	add	r2, r0
 8003e32:	4603      	mov	r3, r0
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d100      	bne.n	8003e3a <memset+0xa>
 8003e38:	4770      	bx	lr
 8003e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e3e:	e7f9      	b.n	8003e34 <memset+0x4>

08003e40 <__utoa>:
 8003e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e42:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <__utoa+0x78>)
 8003e44:	b08b      	sub	sp, #44	; 0x2c
 8003e46:	4605      	mov	r5, r0
 8003e48:	460c      	mov	r4, r1
 8003e4a:	466e      	mov	r6, sp
 8003e4c:	f103 0c20 	add.w	ip, r3, #32
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	6859      	ldr	r1, [r3, #4]
 8003e54:	4637      	mov	r7, r6
 8003e56:	c703      	stmia	r7!, {r0, r1}
 8003e58:	3308      	adds	r3, #8
 8003e5a:	4563      	cmp	r3, ip
 8003e5c:	463e      	mov	r6, r7
 8003e5e:	d1f7      	bne.n	8003e50 <__utoa+0x10>
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	791b      	ldrb	r3, [r3, #4]
 8003e64:	713b      	strb	r3, [r7, #4]
 8003e66:	1e93      	subs	r3, r2, #2
 8003e68:	2b22      	cmp	r3, #34	; 0x22
 8003e6a:	6038      	str	r0, [r7, #0]
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	d904      	bls.n	8003e7c <__utoa+0x3c>
 8003e72:	7023      	strb	r3, [r4, #0]
 8003e74:	461c      	mov	r4, r3
 8003e76:	4620      	mov	r0, r4
 8003e78:	b00b      	add	sp, #44	; 0x2c
 8003e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e7c:	1e66      	subs	r6, r4, #1
 8003e7e:	fbb5 f0f2 	udiv	r0, r5, r2
 8003e82:	af0a      	add	r7, sp, #40	; 0x28
 8003e84:	fb02 5510 	mls	r5, r2, r0, r5
 8003e88:	443d      	add	r5, r7
 8003e8a:	1c59      	adds	r1, r3, #1
 8003e8c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8003e90:	f806 5f01 	strb.w	r5, [r6, #1]!
 8003e94:	4605      	mov	r5, r0
 8003e96:	b968      	cbnz	r0, 8003eb4 <__utoa+0x74>
 8003e98:	5460      	strb	r0, [r4, r1]
 8003e9a:	4423      	add	r3, r4
 8003e9c:	4622      	mov	r2, r4
 8003e9e:	1b19      	subs	r1, r3, r4
 8003ea0:	1b10      	subs	r0, r2, r4
 8003ea2:	4281      	cmp	r1, r0
 8003ea4:	dde7      	ble.n	8003e76 <__utoa+0x36>
 8003ea6:	7811      	ldrb	r1, [r2, #0]
 8003ea8:	7818      	ldrb	r0, [r3, #0]
 8003eaa:	f802 0b01 	strb.w	r0, [r2], #1
 8003eae:	f803 1901 	strb.w	r1, [r3], #-1
 8003eb2:	e7f4      	b.n	8003e9e <__utoa+0x5e>
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	e7e2      	b.n	8003e7e <__utoa+0x3e>
 8003eb8:	08004094 	.word	0x08004094

08003ebc <_init>:
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	bf00      	nop
 8003ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec2:	bc08      	pop	{r3}
 8003ec4:	469e      	mov	lr, r3
 8003ec6:	4770      	bx	lr

08003ec8 <_fini>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	bf00      	nop
 8003ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ece:	bc08      	pop	{r3}
 8003ed0:	469e      	mov	lr, r3
 8003ed2:	4770      	bx	lr
